y[i] = alpha1*y[i-1] + alpha2*y[i-2] + eps[i]
}
plot(y, type = "l", xlab = "Time", ylab = "Y")
eps = rnorm(n,0,0.4)
y = eps
for (i in c(3:n)){
y[i] = alpha1*y[i-1] + alpha2*y[i-2] + eps[i]
}
plot(y, type = "l", xlab = "Time", ylab = "Y")
acf(y, lag = 10)
acf(y, lag = 10, type = "partial")
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, type = "l", xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
abline()
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, type = "l", xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, type = "c", xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, lty = 3, xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, lty = 2, xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, lty = 2, xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
plot(gamma, gamma_est$acf, lty = 2, xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
plot(gamma, gamma_est$acf, lty = 1, xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf, xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
plot(gamma, gamma_est$acf,  xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
gamma_0 = (0.4)^2/(1-alpha1^2-alpha2^2)
x = solve(t(matrix(c(1,-alpha1,-alpha2,-alpha1,1-alpha2,0,alpha2,alpha1,-1), nrow = 3)))
gamma02 = x %*% c(sigma^2,0,0)
options(digits = 3);
gamma = rep(0,8)
for (i in 1:8){
if (i <= 3){
gamma[i] = gamma02[i]
}
else{
gamma[i] = alpha1*gamma[i-1] + alpha2*gamma[i-2]
}
}
gamma_est = acf(y, type = c("covariance"), plot = FALSE, lag = 7)
plot(gamma, gamma_est$acf,  xlab = "true value", ylab = "estimate", main = "estimate vs. true value of autocovariance")
lines(gamma,gamma)
n = 302; alpha1 = 0.4; alpha2 = 0.4; sigma = 0.4
set.seed(123)
eps = rnorm(n,0,0.4)
y = eps
for (i in c(3:n)){
y[i] = alpha1*y[i-1] + alpha2*y[i-2] + eps[i]
}
plot(y, type = "l", xlab = "Time", ylab = "Y")
set.seed(456)
eps = rnorm(n,0,0.4)
y = eps
for (i in c(3:n)){
y[i] = alpha1*y[i-1] + alpha2*y[i-2] + eps[i]
}
plot(y, type = "l", xlab = "Time", ylab = "Y")
eps = rnorm(n,0,0.4)
y = eps
for (i in c(3:n)){
y[i] = alpha1*y[i-1] + alpha2*y[i-2] + eps[i]
}
plot(y, type = "l", xlab = "Time", ylab = "Y")
acf(y, lag = 10)
acf(y, lag = 10, type = "partial")
gamma
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2018531)
parus = pomp(dat,times="year",t0=1959)
plot(parus)
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=(skel,delta.t=1),skeleton.type='map',paramnames=c("r","k"),statenames=c("N"))
?trajectory
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=map(skel,delta.t=1),paramnames=c("r","k"),statenames=c("N"))
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
ggplot(data=traj,aes(x=time,y=N))+geom_line()
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
ggplot(data=traj,aes(x=time,y=N))+geom_line()
stochStep <- Csnippet("
e = rnorm(0,sigma);
N = r*N*exp(-N/k+e);
")
pomp(parus,rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1),
paramnames=c("r","k","sigma"),statenames=c("N","e")) -> parus
stochStep <- Csnippet("
e = rnorm(0,sigma);
N = r*N*exp(-N/k+e);
")
pomp(parus,rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1),
paramnames=c("r","k","sigma"),statenames=c("N","e")) -> parus
sim <- simulate(parus,params=c(N.0=1,e.0=0,r=12,k=1,sigma=0.5),
as.data.frame=TRUE,states=TRUE)
plot(N~time,data=sim,type='o')
lines(N~time,data=traj,type='l',col='red')
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2018531)
parus = pomp(dat,times="year",t0=1959)
plot(parus)
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=map(skel,delta.t=1),paramnames=c("r","k"),statenames=c("N"))
traj<-trajectory(parus,params=c(N.0=1,r=12),as.data.frame=TRUE)
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
ggplot(data=traj,aes(x=time,y=N))+geom_line()
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2018531)
parus = pomp(dat,times="year",t0=1959)
plot(parus)
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=map(skel),paramnames=c("r","k"),statenames=c("N"))
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=map(skel),paramnames=c("r","k"),statenames=c("N"))
help("trajectory")
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
ggplot(data=traj,aes(x=time,y=N))+geom_line()
stochStep <- Csnippet("
e = rnorm(0,sigma);
N = r*N*exp(-N/k+e);
")
pomp(parus,rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1),
paramnames=c("r","k","sigma"),statenames=c("N","e")) -> parus
sim <- simulate(parus,params=c(N.0=1,e.0=0,r=12,k=1,sigma=0.5),
as.data.frame=TRUE,states=TRUE)
plot(N~time,data=sim,type='o')
lines(N~time,data=traj,type='l',col='red')
rmeas <- Csnippet("pop = rnbinom(phi*N*psi/(1-psi),psi);")
dmeas <- Csnippet("lik = dnbinom(pop,phi*N*psi/(1-psi),psi,give_log);")
pomp(parus,rmeasure=rmeas,dmeasure=dmeas,statenames=c("N"),paramnames=c("phi","psi")) -> parus
coef(parus) <- c(N.0=100,e.0=0,r=6,k=100,sigma=0.01,phi=1,psi=0.06)
sims <- simulate(parus,nsim=3,as.data.frame=TRUE,include.data=TRUE)
ggplot(data=sims,mapping=aes(x=time,y=pop))+geom_line()+
facet_wrap(~sim)
knitr::opts_chunk$set(echo = TRUE)
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
acf(crsp)
acf(as.numeric(crsp))
arima(crsp,order=c(1,0,0))
arima(crsp,order=c(2,0,0))
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
arima(crsp,order=c(1,0,0))
arima(crsp,order=c(2,0,0))
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
arima(crsp,order=c(1,0,0))
arima(crsp,order=c(2,0,0))
0.085+1.96*0.02
0.085-1.96*0.02
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
myqqnorm(ar1$resid)
install.packages("StMoSim", lib="D:/APPLICATIONS/R-3.4.3/library")
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
library(StMoSim)
install.packages("StMoSim", lib="D:/APPLICATIONS/R-3.4.3/library")
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
library(StMoSim)
myqqnorm(ar1$resid)
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
library(StMoSim)
myqqnorm(ar1$resid)
myqqnorm(ar1$resid)
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
qqnorm(ar1$resid)
qqnorm(ar2$resid)
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
qqnorm(ar1$resid); qqline(ar1$resid)
qqnorm(ar2$resid)
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
qqnorm(ar1$resid); qqline(ar1$resid)
qqnorm(ar2$resid); qqline(ar1$resid)
install.packages("forecast", lib="D:/APPLICATIONS/R-3.4.3/library")
library(forecast)
auto.arima(crsp, max.p = 4, max.q = 4, ic = "aic")
library(forecast)
auto.arima(crsp, max.p = 4, max.q = 4, ic = "aic")
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,0,q))$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
crsp_aic_table <- aic_table(crsp,4,5)
require(knitr)
kable(crsp_aic_table,digits=2)
require(pomp)
require(ggplot2)
dat <- read.csv("http://ionides.github.io/531w18/notes11/parus.csv")
require(pomp)
require(ggplot2)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
set.seed(2016)
parus<-pomp(dat,times="year",t0=1959)
plot(parus)
require(pomp)
require(ggplot2)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
set.seed(2018531)
parus<-pomp(dat,times="year",t0=1959)
plot(parus)
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=skel,skeleton.type='map',paramnames=c("r","k"),statenames=c("N"))
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=skel,skeleton.type='map',paramnames=c("r","k"),statenames=c("N"))
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
skel<-Csnippet("DN=r*N*exp(-N/k);")
parus<-pomp(parus,skeleton=map(skel),paramnames=c("r","k"),statenames=c("N"))
traj<-trajectory(parus,params=c(N.0=1,r=12,k=1),as.data.frame=TRUE)
ggplot(data=traj,aes(x=time,y=N))+geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
arima(crsp,order=c(1,0,0))
arima(crsp,order=c(2,0,0))
# Diagnostics plots from arima
ar1 = arima(crsp,order=c(1,0,0))
tsdiag(ar1)
ar2 = arima(crsp,order=c(2,0,0))
tsdiag(ar2)
## QQ plots of residuals
qqnorm(ar1$resid); qqline(ar1$resid)
qqnorm(ar2$resid); qqline(ar1$resid)
library(forecast)
auto.arima(crsp, max.p = 4, max.q = 4, ic = "aic")
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,0,q))$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
crsp_aic_table <- aic_table(crsp,4,5)
require(knitr)
kable(crsp_aic_table,digits=2)
stochStep <- Csnippet("
e = rnorm(0,sigma);
N = r*N*exp(-N/k+e);
")
pomp(parus,rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1),
paramnames=c("r","k","sigma"),statenames=c("N","e")) -> parus
sim <- simulate(parus,params=c(N.0=1,e.0=0,r=12,k=1,sigma=0.5),
as.data.frame=TRUE,states=TRUE)
plot(N~time,data=sim,type='o')
lines(N~time,data=traj,type='l',col='red')
library(forecast)
auto.arima(crsp, start = 0, max.p = 4, max.q = 4, ic = "aic")
?auto.arima
help(auto.arima)
help(auto.arima)
help("auto.arima")
library(forecast)
auto.arima(crsp, start.p=0, max.p = 4, max.q = 4, seasonal = FALSE, ic = "aic")
rmeas <- Csnippet("pop = rnbinom(phi*N*psi/(1-psi),psi);")
dmeas <- Csnippet("lik = dnbinom(pop,phi*N*psi/(1-psi),psi,give_log);")
pomp(parus,rmeasure=rmeas,dmeasure=dmeas,statenames=c("N"),paramnames=c("phi","psi")) -> parus
coef(parus) <- c(N.0=100,e.0=0,r=6,k=100,sigma=0.01,phi=1,psi=0.06)
sims <- simulate(parus,nsim=3,as.data.frame=TRUE,include.data=TRUE)
ggplot(data=sims,mapping=aes(x=time,y=pop))+geom_line()+
facet_wrap(~sim)
skel<-Csnippet("DN=a*N/(1+b*N);")
parus<-pomp(parus,skeleton=map(skel),paramnames=c("a","b"),statenames=c("N"))
traj<-trajectory(parus,params=c(N.0=1,a=4,b=2),as.data.frame=TRUE)
ggplot(data=traj,aes(x=time,y=N))+geom_line()
stochStep <- Csnippet("
e = rlnorm((-1)*sigma*sigma/2,sigma);
N = a*N*e/(1+b*N);
")
pomp(parus,rprocess=discrete.time.sim(step.fun=stochStep,delta.t=1),
paramnames=c("a","b","sigma"),statenames=c("N","e")) -> parus
sim <- simulate(parus,params=c(N.0=1,e.0=1,a=4,b=2,sigma=0.2),
as.data.frame=TRUE,states=TRUE)
plot(N~time,data=sim,type='o')
lines(N~time,data=traj,type='l',col='red')
rmeas <- Csnippet("pop = rnbinom(phi*N*psi/(1-psi),psi);")
dmeas <- Csnippet("lik = dnbinom(pop,phi*N*psi/(1-psi),psi,give_log);")
pomp(parus,rmeasure=rmeas,dmeasure=dmeas,statenames=c("N"),paramnames=c("phi","psi")) -> parus
coef(parus) <- c(N.0=100,e.0=1,a=400,b=2,sigma=0.2,phi=1,psi=0.06)
sims <- simulate(parus,nsim=3,as.data.frame=TRUE,include.data=TRUE)
ggplot(data=sims,mapping=aes(x=time,y=pop))+geom_line()+
facet_wrap(~sim)
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,0,q))$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
crsp_aic_table <- aic_table(crsp,4,5)
require(knitr)
kable(crsp_aic_table,digits=2)
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
ar1 = arima(crsp,order=c(1,0,0))
ar2 = arima(crsp,order=c(2,0,0))
left = ar1$coef-1.96*sqrt(ar1$var.coef)
right = ar1$coef+1.96*sqrt(ar1$var.coef)
c(left, right)
ar1$var.coef
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
ar1 = arima(crsp,order=c(1,0,0)); ar1
ar2 = arima(crsp,order=c(2,0,0)); ar2
ar1$asy.var.coef
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
ar1 = arima(crsp,order=c(1,0,0)); ar1(digit=3)
??arima
help(arima)
left = ar1$coef-1.96*sqrt(ar1$var.coef[1,1])
right = ar1$coef+1.96*sqrt(ar1$var.coef[1,1])
c(left, right)
ar1$var.coef[1,1]
ar1$coef
ar1$coef[1]
left = ar1$coef[1]-1.96*sqrt(ar1$var.coef[1,1])
right = ar1$coef[1]+1.96*sqrt(ar1$var.coef[1,1])
c(left, right)
# Diagnostics plots from arima
tsdiag(ar1)
tsdiag(ar2)
## QQ plots of residuals
qqnorm(ar1$resid); qqline(ar1$resid)
qqnorm(ar2$resid); qqline(ar1$resid)
library(forecast)
auto.arima(crsp, start.p=0, max.p = 4, max.q = 4, seasonal = FALSE, ic = "aic")
ma1 = arima(crsp,order=c(0,0,1)); ma1
tsdiag(ma1)
qqnorm(ma1$resid); qqline(ma1$resid)
