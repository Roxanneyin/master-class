nuest = df[which.max(loglik_max)]
N = length(residual)
quantv = (1/N)*seq(0.5,N-0.5,1)
par(mfrow=c(1,2))
qqnorm(garch11@residuals/garch11@sigma.t, main = "QQ plot for normal-distribution")
qqline(garch11@residuals/garch11@sigma.t)
qqplot(qt(quantv,nuest), residual, main="QQ plot for t-distribution")
qqline(residual, distribution=function(p) qt(p,nuest), prob=c(0.1,0.9), col=1)
predict_garch11 = predict(garch11, n.ahead = 5)
VaR_norm = 1-exp(qnorm(0.005, predict_garch11$meanForecast, predict_garch11$standardDeviation))
VaR_t = 1-exp(predict_garch11$meanForecast+predict_garch11$standardDeviation*sqrt(nuest-2/nuest)*qt(0.005,nuest))
VaR_norm; VaR_t
predict_garch11 = predict(garch11, n.ahead = 5)
VaR_norm = 1-exp(qnorm(0.005, predict_garch11$meanForecast, predict_garch11$standardDeviation))
VaR_t = 1-exp(predict_garch11$meanForecast+predict_garch11$standardDeviation*sqrt((nuest-2)/nuest)*qt(0.005,nuest))
VaR_norm; VaR_t
predict_garch11 = predict(garch11, n.ahead = 5)
VaR_norm = 1-exp(qnorm(0.005, predict_garch11$meanForecast, predict_garch11$standardDeviation))
garch11_t = garchFit(~garch(1,1), data = NYSE_lret.ts, cond.dist = c("std"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt"))
VaR_t = 1-exp(predict_garch11_t$meanForecast+predict_garch11_t$standardDeviation*sqrt((nuest-2)/nuest)*qt(0.005,nuest))
predict_garch11 = predict(garch11, n.ahead = 5)
VaR_norm = 1-exp(qnorm(0.005, predict_garch11$meanForecast, predict_garch11$standardDeviation))
garch11_t = garchFit(~garch(1,1), data = NYSE_lret.ts, cond.dist = c("std"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt"))
VaR_t = 1-exp(predict_garch11_t$meanForecast+predict_garch11_t$standardDeviation*sqrt((nuest-2)/nuest)*qt(0.005,nuest))
predict_garch11 = predict(garch11, n.ahead = 5)
VaR_norm = 1-exp(qnorm(0.005, predict_garch11$meanForecast, predict_garch11$standardDeviation))
garch11_t = garchFit(~garch(1,1), data = NYSE_lret.ts, cond.dist = c("std"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt"))
predict_garch11_t = predict(garch11_t, n.ahead = 5)
VaR_t = 1-exp(predict_garch11_t$meanForecast+predict_garch11_t$standardDeviation*sqrt((nuest-2)/nuest)*qt(0.005,nuest))
VaR_norm; VaR_t
nuest_t = garch11_t@fit$coef[5]
predict_garch11 = predict(garch11, n.ahead = 5)
VaR_norm = 1-exp(qnorm(0.005, predict_garch11$meanForecast, predict_garch11$standardDeviation))
garch11_t = garchFit(~garch(1,1), data = NYSE_lret.ts, cond.dist = c("std"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt"))
predict_garch11_t = predict(garch11_t, n.ahead = 5)
nuest_t = garch11_t@fit$coef[5]
VaR_t = 1-exp(predict_garch11_t$meanForecast+predict_garch11_t$standardDeviation*sqrt((nuest_t-2)/nuest_t)*qt(0.005,nuest_t))
VaR_norm; VaR_t
VaR_norm; VaR_t
library(fGarch)
garch11 = garchFit(~garch(1,1), data = NYSE_lret.ts, cond.dist = c("norm"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt"))
summary(garch11)
ar1garch11 = garchFit(~arma(1,0)+garch(1,1), data = NYSE_lret.ts, cond.dist = c("norm"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt")); summary(ar1garch11)
ar2garch11 = garchFit(~arma(2,0)+garch(1,1), data = NYSE_lret.ts, cond.dist = c("norm"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt"))
ar3garch11 = garchFit(~arma(3,0)+garch(1,1), data = NYSE_lret.ts, cond.dist = c("norm"), include.mean = TRUE, algorithm = c("nlminb"), hessian = c("ropt"))
ar1garch11
ar2garch11
ar3garch11
garch11@fit$ics
garch11_t@fit$ics
garch11@fit$ics
garch11_t@fit$ics
summary(garch11_t)
knitr::opts_chunk$set(echo = TRUE)
options(
keep.source=TRUE,
stringsAsFactors=FALSE,
encoding="UTF-8"
)
set.seed(594709947L)
require(ggplot2)
theme_set(theme_bw())
require(plyr)
require(reshape2)
require(magrittr)
require(foreach)
require(doMC)
require(pomp)
stopifnot(packageVersion("pomp")>="0.69-1")
bsflu_data <- read.table("bsflu_data.txt")
setwd("D:/STUDY/graduate/Umich/Study/2018 win/STATS 531/hm9")
options(
keep.source=TRUE,
stringsAsFactors=FALSE,
encoding="UTF-8"
)
set.seed(594709947L)
require(ggplot2)
theme_set(theme_bw())
require(plyr)
require(reshape2)
require(magrittr)
require(foreach)
require(doMC)
require(pomp)
stopifnot(packageVersion("pomp")>="0.69-1")
bsflu_data <- read.table("bsflu_data.txt")
bsflu_statenames <- c("S","I","R1","R2")
bsflu_paramnames <- c("Beta","mu_I","rho","mu_R1","mu_R2")
bsflu_obsnames <- colnames(bsflu_data)[1:2]
bsflu_dmeasure <- "
lik = dpois(B,rho*R1+1e-6,give_log);
"
bsflu_rmeasure <- "
B = rpois(rho*R1+1e-6);
C = rpois(rho*R2);
"
bsflu_rprocess <- "
double t1 = rbinom(S,1-exp(-Beta*I*dt));
double t2 = rbinom(I,1-exp(-dt*mu_I));
double t3 = rbinom(R1,1-exp(-dt*mu_R1));
double t4 = rbinom(R2,1-exp(-dt*mu_R2));
S -= t1;
I += t1 - t2;
R1 += t2 - t3;
R2 += t3 - t4;
"
bsflu_fromEstimationScale <- "
TBeta = exp(Beta);
Tmu_I = exp(mu_I);
Trho = expit(rho);
"
bsflu_toEstimationScale <- "
TBeta = log(Beta);
Tmu_I = log(mu_I);
Trho = logit(rho);
"
bsflu_initializer <- "
S=762;
I=1;
R1=0;
R2=0;
"
require(pomp)
stopifnot(packageVersion("pomp")>="0.75-1")
bsflu2 <- pomp(
data=bsflu_data,
times="day",
t0=0,
rprocess=euler.sim(
step.fun=Csnippet(bsflu_rprocess),
delta.t=1/12
),
rmeasure=Csnippet(bsflu_rmeasure),
dmeasure=Csnippet(bsflu_dmeasure),
fromEstimationScale=Csnippet(bsflu_fromEstimationScale),
toEstimationScale=Csnippet(bsflu_toEstimationScale),
obsnames = bsflu_obsnames,
statenames=bsflu_statenames,
paramnames=bsflu_paramnames,
initializer=Csnippet(bsflu_initializer)
)
run_level <- 3
switch(run_level,
{bsflu_Np=100; bsflu_Nmif=10; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=20000; bsflu_Nmif=100; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=60000; bsflu_Nmif=300; bsflu_Neval=10; bsflu_Nglobal=100; bsflu_Nlocal=20}
)
bsflu_params <- data.matrix(read.table("mif_bsflu_params.csv",row.names=NULL,header=TRUE))
options(
keep.source=TRUE,
stringsAsFactors=FALSE,
encoding="UTF-8"
)
set.seed(594709947L)
require(ggplot2)
theme_set(theme_bw())
require(plyr)
require(reshape2)
require(magrittr)
require(foreach)
require(doMC)
require(pomp)
stopifnot(packageVersion("pomp")>="0.69-1")
bsflu_data <- read.table("bsflu_data.txt")
bsflu_statenames <- c("S","I","R1","R2")
bsflu_paramnames <- c("Beta","mu_I","rho","mu_R1","mu_R2")
bsflu_obsnames <- colnames(bsflu_data)[1:2]
bsflu_dmeasure <- "
lik = dpois(B,rho*R1+1e-6,give_log);
"
bsflu_rmeasure <- "
B = rpois(rho*R1+1e-6);
C = rpois(rho*R2);
"
bsflu_rprocess <- "
double t1 = rbinom(S,1-exp(-Beta*I*dt));
double t2 = rbinom(I,1-exp(-dt*mu_I));
double t3 = rbinom(R1,1-exp(-dt*mu_R1));
double t4 = rbinom(R2,1-exp(-dt*mu_R2));
S -= t1;
I += t1 - t2;
R1 += t2 - t3;
R2 += t3 - t4;
"
bsflu_fromEstimationScale <- "
TBeta = exp(Beta);
Tmu_I = exp(mu_I);
Trho = expit(rho);
"
bsflu_toEstimationScale <- "
TBeta = log(Beta);
Tmu_I = log(mu_I);
Trho = logit(rho);
"
bsflu_initializer <- "
S=762;
I=1;
R1=0;
R2=0;
"
require(pomp)
stopifnot(packageVersion("pomp")>="0.75-1")
bsflu2 <- pomp(
data=bsflu_data,
times="day",
t0=0,
rprocess=euler.sim(
step.fun=Csnippet(bsflu_rprocess),
delta.t=1/12
),
rmeasure=Csnippet(bsflu_rmeasure),
dmeasure=Csnippet(bsflu_dmeasure),
fromEstimationScale=Csnippet(bsflu_fromEstimationScale),
toEstimationScale=Csnippet(bsflu_toEstimationScale),
obsnames = bsflu_obsnames,
statenames=bsflu_statenames,
paramnames=bsflu_paramnames,
initializer=Csnippet(bsflu_initializer)
)
run_level <- 3
switch(run_level,
{bsflu_Np=100; bsflu_Nmif=10; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=20000; bsflu_Nmif=100; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=60000; bsflu_Nmif=300; bsflu_Neval=10; bsflu_Nglobal=100; bsflu_Nlocal=20}
)
bsflu_params <- data.matrix(read.table("mif_bsflu_params.csv",row.names=NULL,header=TRUE))
bsflu_mle <- bsflu_params[which.max(bsflu_params[,"logLik"]),][bsflu_paramnames]
bsflu_fixed_params <- c(mu_R1=1/(sum(bsflu_data$B)/512),mu_R2=1/(sum(bsflu_data$C)/512))
require(doParallel)
cores <- 20  # The number of cores on this machine
registerDoParallel(cores)
mcopts <- list(set.seed=TRUE)
set.seed(396658101,kind="L'Ecuyer")
bsflu_box <- rbind(
Beta=c(0.001,0.01),
mu_I=c(0.5,2),
rho = c(0.5,1)
)
bsflu_rw.sd <- 0.02
bsflu_cooling.fraction.50 <- 0.5
stew(file=sprintf("box_eval-%d.rda",run_level),{
t_global <- system.time({
mifs_global <- foreach(i=1:bsflu_Nglobal,.packages='pomp', .combine=c, .options.multicore=mcopts) %dopar%
mif2(
bsflu2,
start=c(apply(bsflu_box,1,function(x)runif(1,x[1],x[2])),bsflu_fixed_params),
Np=bsflu_Np,
Nmif=bsflu_Nmif,
cooling.type="geometric",
cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd
)
)
})
},seed=1270401374,kind="L'Ecuyer")
View(bsflu2)
options(
keep.source=TRUE,
stringsAsFactors=FALSE,
encoding="UTF-8"
)
set.seed(594709947L)
require(ggplot2)
theme_set(theme_bw())
require(plyr)
require(reshape2)
require(magrittr)
require(foreach)
require(doMC)
require(pomp)
stopifnot(packageVersion("pomp")>="0.69-1")
bsflu_data <- read.table("bsflu_data.txt")
bsflu_statenames <- c("S","I","R1","R2")
bsflu_paramnames <- c("Beta","mu_I","rho","mu_R1","mu_R2")
bsflu_obsnames <- colnames(bsflu_data)[1:2]
bsflu_dmeasure <- "
lik = dpois(B,rho*R1+1e-6,give_log);
"
bsflu_rmeasure <- "
B = rpois(rho*R1+1e-6);
C = rpois(rho*R2);
"
bsflu_rprocess <- "
double t1 = rbinom(S,1-exp(-Beta*I*dt));
double t2 = rbinom(I,1-exp(-dt*mu_I));
double t3 = rbinom(R1,1-exp(-dt*mu_R1));
double t4 = rbinom(R2,1-exp(-dt*mu_R2));
S -= t1;
I += t1 - t2;
R1 += t2 - t3;
R2 += t3 - t4;
"
bsflu_fromEstimationScale <- "
TBeta = exp(Beta);
Tmu_I = exp(mu_I);
Trho = expit(rho);
"
bsflu_toEstimationScale <- "
TBeta = log(Beta);
Tmu_I = log(mu_I);
Trho = logit(rho);
"
bsflu_initializer <- "
S=762;
I=1;
R1=0;
R2=0;
"
require(pomp)
stopifnot(packageVersion("pomp")>="0.75-1")
bsflu2 <- pomp(
data=bsflu_data,
times="day",
t0=0,
rprocess=euler.sim(
step.fun=Csnippet(bsflu_rprocess),
delta.t=1/12
),
rmeasure=Csnippet(bsflu_rmeasure),
dmeasure=Csnippet(bsflu_dmeasure),
fromEstimationScale=Csnippet(bsflu_fromEstimationScale),
toEstimationScale=Csnippet(bsflu_toEstimationScale),
obsnames = bsflu_obsnames,
statenames=bsflu_statenames,
paramnames=bsflu_paramnames,
initializer=Csnippet(bsflu_initializer)
)
plot(bsflu2)
run_level <- 3
switch(run_level,
{bsflu_Np=100; bsflu_Nmif=10; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=20000; bsflu_Nmif=100; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=60000; bsflu_Nmif=300; bsflu_Neval=10; bsflu_Nglobal=100; bsflu_Nlocal=20}
)
bsflu_params <- data.matrix(read.table("mif_bsflu_params.csv",row.names=NULL,header=TRUE))
bsflu_mle <- bsflu_params[which.max(bsflu_params[,"logLik"]),][bsflu_paramnames]
bsflu_fixed_params <- c(mu_R1=1/(sum(bsflu_data$B)/512),mu_R2=1/(sum(bsflu_data$C)/512))
require(doParallel)
cores <- 20  # The number of cores on this machine
registerDoParallel(cores)
mcopts <- list(set.seed=TRUE)
set.seed(396658101,kind="L'Ecuyer")
bsflu_box <- rbind(
Beta=c(0.001,0.01),
mu_I=c(0.5,2),
rho = c(0.5,1)
)
bsflu_rw.sd <- 0.02
bsflu_cooling.fraction.50 <- 0.5
stew(file=sprintf("box_eval-%d.rda",run_level),{
t_global <- system.time({
mifs_global <- foreach(i=1:bsflu_Nglobal,.packages='pomp', .combine=c, .options.multicore=mcopts) %dopar%
mif2(
bsflu2,
start=c(apply(bsflu_box,1,function(x)runif(1,x[1],x[2])),bsflu_fixed_params),
Np=bsflu_Np,
Nmif=bsflu_Nmif,
cooling.type="geometric",
cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd
)
)
})
},seed=1270401374,kind="L'Ecuyer")
knitr::opts_chunk$set(echo = TRUE)
options(
keep.source=TRUE,
stringsAsFactors=FALSE,
encoding="UTF-8"
)
set.seed(594709947L)
require(ggplot2)
theme_set(theme_bw())
require(plyr)
require(reshape2)
require(magrittr)
require(foreach)
require(doMC)
require(pomp)
stopifnot(packageVersion("pomp")>="0.69-1")
bsflu_data <- read.table("bsflu_data.txt")
bsflu_statenames <- c("S","I","R1","R2")
bsflu_paramnames <- c("Beta","mu_I","rho","mu_R1","mu_R2")
bsflu_obsnames <- colnames(bsflu_data)[1:2]
bsflu_dmeasure <- "
lik = dpois(B,rho*R1+1e-6,give_log);
"
bsflu_rmeasure <- "
B = rpois(rho*R1+1e-6);
C = rpois(rho*R2);
"
bsflu_rprocess <- "
double t1 = rbinom(S,1-exp(-Beta*I*dt));
double t2 = rbinom(I,1-exp(-dt*mu_I));
double t3 = rbinom(R1,1-exp(-dt*mu_R1));
double t4 = rbinom(R2,1-exp(-dt*mu_R2));
S -= t1;
I += t1 - t2;
R1 += t2 - t3;
R2 += t3 - t4;
"
bsflu_fromEstimationScale <- "
TBeta = exp(Beta);
Tmu_I = exp(mu_I);
Trho = expit(rho);
"
bsflu_toEstimationScale <- "
TBeta = log(Beta);
Tmu_I = log(mu_I);
Trho = logit(rho);
"
bsflu_initializer <- "
S=762;
I=1;
R1=0;
R2=0;
"
require(pomp)
stopifnot(packageVersion("pomp")>="0.75-1")
bsflu2 <- pomp(
data=bsflu_data,
times="day",
t0=0,
rprocess=euler.sim(
step.fun=Csnippet(bsflu_rprocess),
delta.t=1/12
),
rmeasure=Csnippet(bsflu_rmeasure),
dmeasure=Csnippet(bsflu_dmeasure),
fromEstimationScale=Csnippet(bsflu_fromEstimationScale),
toEstimationScale=Csnippet(bsflu_toEstimationScale),
obsnames = bsflu_obsnames,
statenames=bsflu_statenames,
paramnames=bsflu_paramnames,
initializer=Csnippet(bsflu_initializer)
)
plot(bsflu2)
run_level <- 3
switch(run_level,
{bsflu_Np=100; bsflu_Nmif=10; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=20000; bsflu_Nmif=100; bsflu_Neval=10; bsflu_Nglobal=10; bsflu_Nlocal=10},
{bsflu_Np=60000; bsflu_Nmif=300; bsflu_Neval=10; bsflu_Nglobal=100; bsflu_Nlocal=20}
)
bsflu_params <- data.matrix(read.table("mif_bsflu_params.csv",row.names=NULL,header=TRUE))
bsflu_mle <- bsflu_params[which.max(bsflu_params[,"logLik"]),][bsflu_paramnames]
bsflu_fixed_params <- c(mu_R1=1/(sum(bsflu_data$B)/512),mu_R2=1/(sum(bsflu_data$C)/512))
require(doParallel)
cores <- 20  # The number of cores on this machine
registerDoParallel(cores)
mcopts <- list(set.seed=TRUE)
set.seed(396658101,kind="L'Ecuyer")
bsflu_box <- rbind(
Beta=c(0.001,0.01),
mu_I=c(0.5,2),
rho = c(0.5,1)
)
bsflu_rw.sd <- 0.02
bsflu_cooling.fraction.50 <- 0.5
stew(file=sprintf("box_eval-%d.rda",run_level),{
t_global <- system.time({
mifs_global <- foreach(i=1:bsflu_Nglobal,.packages='pomp', .combine=c, .options.multicore=mcopts) %dopar%
mif2(
bsflu2,
start=c(apply(bsflu_box,1,function(x)runif(1,x[1],x[2])),bsflu_fixed_params),
Np=bsflu_Np,
Nmif=bsflu_Nmif,
cooling.type="geometric",
cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd
)
)
})
},seed=1270401374,kind="L'Ecuyer")
require(doMC)
registerDoMC(cores=20)
require(doMC)
install.packages("doMC", lib="D:/APPLICATIONS/R-3.4.3/library")
install.packages("doParallel", lib="D:/APPLICATIONS/R-3.4.3/library")
install.packages("plyr", lib="D:/APPLICATIONS/R-3.4.3/library")
bookdown:::mathquill()
knitr::opts_chunk$set(echo = TRUE)
require(ggplot2)
require(ggplot2)
theme_set(theme_bw())
require(plyr)
require(plyr)
require(reshape2)
require(reshape2)
require(magrittr)
require(magrittr)
require(foreach)
require(foreach)
require(doMC)
require(doMC)
require(pomp)
require(pomp)
install.packages("doMC", lib="D:/APPLICATIONS/R-3.4.3/library")
library(installr)
updateR()
