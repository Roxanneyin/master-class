Nas_ivp_names <- c("V_0")
Nas_paramnames <- c(Nas_rp_names,Nas_ivp_names)
Nas_covarnames <- "covaryt"
rproc1 <- "
double omega;
omega = rnorm(0,sigma_omega);
V = theta*(1 - phi) + phi*sqrt(V) + sqrt(V)*omega;
"
rproc2.sim <- "
Y_state = rnorm( 0,sqrt(V) );
"
rproc2.filt <- "
Y_state = covaryt;
"
Nas_rproc.sim <- paste(rproc1,rproc2.sim)
Nas_rproc.filt <- paste(rproc1,rproc2.filt)
Nas_initializer <- "
V = V_0;
Y_state = rnorm( 0,sqrt(V) );
"
Nas_rmeasure <- "
y=Y_state;
"
Nas_dmeasure <- "
lik=dnorm(y,0,sqrt(V),give_log);
"
Nas_toEstimationScale <- "
Tsigma_omega = log(sigma_omega);
Ttheta = log(theta);
Tphi = logit(phi);
"
Nas_fromEstimationScale <- "
Tsigma_omega = exp(sigma_omega);
Ttheta = exp(theta);
Tphi = expit(phi);
"
##----------test for parameters--------------##
Nas.filt <- pomp(data=data.frame(y=Nas_hp,
time=1:length(Nas_hp)),
statenames=Nas_statenames,
paramnames=Nas_paramnames,
covarnames=Nas_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,Nas_hp),
time=0:length(Nas_hp)),
tcovar="time",
rmeasure=Csnippet(Nas_rmeasure),
dmeasure=Csnippet(Nas_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(Nas_rproc.filt),delta.t=1),
initializer=Csnippet(Nas_initializer),
toEstimationScale=Csnippet(Nas_toEstimationScale),
fromEstimationScale=Csnippet(Nas_fromEstimationScale)
)
expit<-function(real){1/(1+exp(-real))}
logit<-function(p.arg){log(p.arg/(1-p.arg))}
params_test <- c(
sigma_omega = 0.001,
phi = 0.001,
theta = 0.0004,
V_0= 0.002
)
sim1.sim <- pomp(Nas.filt,
statenames=Nas_statenames,
paramnames=Nas_paramnames,
covarnames=Nas_covarnames,
rprocess=discrete.time.sim(step.fun=Csnippet(Nas_rproc.sim),delta.t=1)
)
sim1.sim <- simulate(sim1.sim,seed=1,params=params_test)
plot(Y_state~time,data=sim1.sim,type='l',col="red",ylim=c(-0.06,0.1))
lines(Nas_hp,type='l')
legend("topleft",legend=c("Original","Simulated"),col=c("black","red"),
cex=0.8,lty=1,bty="n")
par(mfrow=c(1,2))
plot(V~time,data=sim1.sim,type='l',main="Simulated Volatility")
plot(Y_state~time,data=sim1.sim,type='l',main="Simulated Y_state")
plot(sim1.sim)
##--------filtering on simulated data----------##
run_level <- 3
Nas_Np <-          c(100,1e3,5e3)
Nas_Nmif <-        c(10, 100,200)
Nas_Nreps_eval <-  c(4,  10,  20)
Nas_Nreps_local <- c(10, 20, 20)
Nas_Nreps_global <-c(10, 20, 40)
require(doParallel)
registerDoParallel(2)
sim1.filt <- pomp(sim1.sim,
covar=data.frame(
covaryt=c(obs(sim1.sim),NA),
time=c(timezero(sim1.sim),time(sim1.sim))),
tcovar="time",
statenames=Nas_statenames,
paramnames=Nas_paramnames,
covarnames=Nas_covarnames,
rprocess=discrete.time.sim(step.fun=Csnippet(Nas_rproc.filt),delta.t=1)
)
stew(file=sprintf("pf1.rda",run_level),{
t.pf1 <- system.time(
pf1 <- foreach(i=1:Nas_Nreps_eval[run_level],.packages='pomp',
.options.multicore=list(set.seed=TRUE), .export = c('sim1.filt','Nas_Np','run_level')) %dopar% try(
pfilter(sim1.filt,Np=Nas_Np[run_level])
)
)
},seed=493536993,kind="L'Ecuyer")
(L.pf1 <- logmeanexp(sapply(pf1,logLik),se=TRUE))
##---------Fitting the stochastic leverage model to Nasdaq data------------
run_level <- 2
Nas_Np <-          c(100, 1e3, 1e4)
Nas_Nmif <-        c(10, 200, 400)
Nas_Nreps_eval <-  c(4, 10, 20)
Nas_Nreps_local <- c(10, 20, 20)
Nas_Nreps_global <-c(10, 20, 40)
Nas_rw.sd_rp <- 0.001
Nas_rw.sd_ivp <- 0.001
Nas_cooling.fraction.50 <- 0.5
params_test <- c(
sigma_omega = 0.001,
phi = 0.001,
theta = 1,
V_0= 0.02
)
stew(file=sprintf("mif1-%d.rda",run_level),{
t.if1 <- system.time({
if1 <- foreach(i=1:Nas_Nreps_global[run_level],
.packages='pomp', .combine=c,
.options.multicore=list(set.seed=TRUE), .export = c('Nas.filt','Nas_Nmif','run_level','params_test','Nas_Np','Nas_rw.sd_rp','Nas_rw.sd_ivp','Nas_cooling.fraction.50')) %dopar% try(
mif2(Nas.filt,
start=params_test,
Np=Nas_Np[run_level],
Nmif=Nas_Nmif[run_level],
cooling.type="geometric",
cooling.fraction.50=Nas_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
sigma_omega  = Nas_rw.sd_rp,
theta      = Nas_rw.sd_rp,
phi       = Nas_rw.sd_rp,
V_0       = ivp(Nas_rw.sd_ivp)
)
)
)
L.if1 <- foreach(i=1:Nas_Nreps_global[run_level],.packages='pomp',
.combine=rbind,.options.multicore=list(set.seed=TRUE), .export = c('Nas_Nreps_eval','run_level','Nas.filt','Nas_Np')) %dopar%
{
logmeanexp(
replicate(Nas_Nreps_eval[run_level],
logLik(pfilter(Nas.filt,params=coef(if1[[i]]),Np=Nas_Np[run_level]))
),
se=TRUE)
}
})
},seed=318817883,kind="L'Ecuyer")
r.if1 <- data.frame(logLik=L.if1[,1],logLik_se=L.if1[,2],t(sapply(if1,coef)))
if (run_level>1)
write.table(r.if1,file="Nas_params.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
summary(r.if1$logLik,digits=5)
r.if1[which.max(r.if1$logLik),]
pairs(~logLik+sigma_omega+theta+phi,data=r.if1)
plot(if1)
##--------Likelihood maximization using randomized starting values--------##
run_level <- 3
Nas_box <- rbind(
sigma_omega=c(0.001,0.005),
theta    = c(0.9,1),
phi = c(0.001,0.005),
V_0 = c(0.02,0.03)
)
stew(file=sprintf("box_eval-%d.rda",run_level),{
t.box <- system.time({
if.box <- foreach(i=1:Nas_Nreps_global[run_level],.packages='pomp',.combine=c,
.options.multicore=list(set.seed=TRUE), .export = c('if1','Nas_box','Nas_Nreps_eval','run_level')) %dopar%
mif2(
if1[[1]],
start=apply(Nas_box,1,function(x)runif(1,x[1],x[2]))
)
L.box <- foreach(i=1:Nas_Nreps_global[run_level],.packages='pomp',.combine=rbind,
.options.multicore=list(set.seed=TRUE), .export = c('if1','Nas_box','Nas_Nreps_eval','run_level','Nas.filt','Nas_Np')) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Nas_Nreps_eval[run_level],
logLik(pfilter(Nas.filt,params=coef(if.box[[i]]),Np=Nas_Np[run_level]))
),
se=TRUE)
}
})
},seed=290860873,kind="L'Ecuyer")
r.box <- data.frame(logLik=L.box[,1],logLik_se=L.box[,2],t(sapply(if.box,coef)))
if(run_level>1) write.table(r.box,file="Nas_params.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
summary(r.box$logLik,digits=5)
r.box[which.max(r.box$logLik),]
pairs(~logLik+sigma_omega+theta+phi+V_0,data=r.box)
plot(if.box)
library(tseries)
L.garch.benchmark = logLik(garch(Nas_hp))
L.garch.benchmark
library(tseries)
L.garch.benchmark = logLik(garch(Nas_hp))
L.garch.benchmark
require(pomp)
Nas_statenames <- c("V","Y_state")
Nas_rp_names <- c("sigma_omega","phi","theta")
Nas_ivp_names <- c("V_0")
Nas_paramnames <- c(Nas_rp_names,Nas_ivp_names)
Nas_covarnames <- "covaryt"
rproc1 <- "
double omega;
omega = rnorm(0,sigma_omega);
V = theta*(1 - phi) + phi*sqrt(V) + sqrt(V)*omega;
"
rproc2.sim <- "
Y_state = rnorm( 0,sqrt(V) );
"
rproc2.filt <- "
Y_state = covaryt;
"
Nas_rproc.sim <- paste(rproc1,rproc2.sim)
Nas_rproc.filt <- paste(rproc1,rproc2.filt)
knitr::opts_chunk$set(echo = TRUE)
bsflu_rw.sd <- 0.02
bsflu_cooling.fraction.50 <- 0.5
stew(file=sprintf("box_eval-%d.rda",run_level),{
t_global <- system.time({
mifs_global <- foreach(i=1:bsflu_Nglobal,.packages='pomp', .combine=c, .options.multicore=mcopts,.export = c('bsflu_Nmif','bsflu2','bsflu_box','bsflu_fixed_params','bsflu_Np','bsflu_rw.sd','bsflu_cooling.fraction.50')) %dopar%
mif2(
bsflu2,
start=c(apply(bsflu_box,1,function(x)runif(1,x[1],x[2])),bsflu_fixed_params),
Np=bsflu_Np,
Nmif=bsflu_Nmif,
cooling.type="geometric",
cooling.fraction.50=bsflu_cooling.fraction.50,
transform=TRUE,
rw.sd=rw.sd(
Beta=bsflu_rw.sd,
mu_I=bsflu_rw.sd,
rho=bsflu_rw.sd
)
)
})
},seed=1270401374,kind="L'Ecuyer")
##---------Fitting the stochastic leverage model to Nasdaq data------------
run_level <- 2
Nas_Np <-          c(100, 1e3, 1e4)
Nas_Nmif <-        c(10, 200, 400)
Nas_Nreps_eval <-  c(4, 10, 20)
Nas_Nreps_local <- c(10, 20, 20)
Nas_Nreps_global <-c(10, 20, 40)
Nas_rw.sd_rp <- 0.001
Nas_rw.sd_ivp <- 0.001
Nas_cooling.fraction.50 <- 0.5
params_test <- c(
sigma_omega = 0.001,
phi = 0.001,
theta = 1,
V_0= 0.02
)
stew(file=sprintf("mif1-%d.rda",run_level),{
t.if1 <- system.time({
if1 <- foreach(i=1:Nas_Nreps_global[run_level],
.packages='pomp', .combine=c,
.options.multicore=list(set.seed=TRUE), .export = c('Nas.filt','Nas_Nmif','run_level','params_test','Nas_Np','Nas_rw.sd_rp','Nas_rw.sd_ivp','Nas_cooling.fraction.50')) %dopar% try(
mif2(Nas.filt,
start=params_test,
Np=Nas_Np[run_level],
Nmif=Nas_Nmif[run_level],
cooling.type="geometric",
cooling.fraction.50=Nas_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
sigma_omega  = Nas_rw.sd_rp,
theta      = Nas_rw.sd_rp,
phi       = Nas_rw.sd_rp,
V_0       = ivp(Nas_rw.sd_ivp)
)
)
)
L.if1 <- foreach(i=1:Nas_Nreps_global[run_level],.packages='pomp',
.combine=rbind,.options.multicore=list(set.seed=TRUE), .export = c('Nas_Nreps_eval','run_level','Nas.filt','Nas_Np')) %dopar%
{
logmeanexp(
replicate(Nas_Nreps_eval[run_level],
logLik(pfilter(Nas.filt,params=coef(if1[[i]]),Np=Nas_Np[run_level]))
),
se=TRUE)
}
})
},seed=318817883,kind="L'Ecuyer")
r.if1 <- data.frame(logLik=L.if1[,1],logLik_se=L.if1[,2],t(sapply(if1,coef)))
if (run_level>1)
write.table(r.if1,file="Nas_params.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
summary(r.if1$logLik,digits=5)
knitr::opts_chunk$set(echo = TRUE)
Nas=read.csv(file = "NDAQ.csv",header = T)
Nas_log=diff(log(Nas$Adj.Close))
Nas_hp=Nas_log - mean(Nas_log)
par(mfrow=c(1,2))
plot(Nas$Adj.Close,type='l',main="Adjusted Nasdaq")
plot(Nas_hp,type = 'l',main="Demeaned log return")
require(pomp)
Nas_statenames <- c("V","Y_state")
Nas_rp_names <- c("sigma_omega","phi","theta")
Nas_ivp_names <- c("V_0")
Nas_paramnames <- c(Nas_rp_names,Nas_ivp_names)
Nas_covarnames <- "covaryt"
rproc1 <- "
double omega;
omega = rnorm(0,sigma_omega);
V = theta*(1 - phi) + phi*sqrt(V) + sqrt(V)*omega;
"
rproc2.sim <- "
Y_state = rnorm( 0,sqrt(V) );
"
rproc2.filt <- "
Y_state = covaryt;
"
Nas_rproc.sim <- paste(rproc1,rproc2.sim)
Nas_rproc.filt <- paste(rproc1,rproc2.filt)
Nas_initializer <- "
V = V_0;
Y_state = rnorm( 0,sqrt(V) );
"
Nas_rmeasure <- "
y=Y_state;
"
Nas_dmeasure <- "
lik=dnorm(y,0,sqrt(V),give_log);
"
Nas_toEstimationScale <- "
Tsigma_omega = log(sigma_omega);
Ttheta = log(theta);
Tphi = logit(phi);
"
Nas_fromEstimationScale <- "
Tsigma_omega = exp(sigma_omega);
Ttheta = exp(theta);
Tphi = expit(phi);
"
##----------test for parameters--------------##
Nas.filt <- pomp(data=data.frame(y=Nas_hp,
time=1:length(Nas_hp)),
statenames=Nas_statenames,
paramnames=Nas_paramnames,
covarnames=Nas_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,Nas_hp),
time=0:length(Nas_hp)),
tcovar="time",
rmeasure=Csnippet(Nas_rmeasure),
dmeasure=Csnippet(Nas_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(Nas_rproc.filt),delta.t=1),
initializer=Csnippet(Nas_initializer),
toEstimationScale=Csnippet(Nas_toEstimationScale),
fromEstimationScale=Csnippet(Nas_fromEstimationScale)
)
expit<-function(real){1/(1+exp(-real))}
logit<-function(p.arg){log(p.arg/(1-p.arg))}
params_test <- c(
sigma_omega = 0.001,
phi = 0.001,
theta = 0.0004,
V_0= 0.002
)
sim1.sim <- pomp(Nas.filt,
statenames=Nas_statenames,
paramnames=Nas_paramnames,
covarnames=Nas_covarnames,
rprocess=discrete.time.sim(step.fun=Csnippet(Nas_rproc.sim),delta.t=1)
)
sim1.sim <- simulate(sim1.sim,seed=1,params=params_test)
plot(Y_state~time,data=sim1.sim,type='l',col="red",ylim=c(-0.06,0.1))
lines(Nas_hp,type='l')
legend("topleft",legend=c("Original","Simulated"),col=c("black","red"),
cex=0.8,lty=1,bty="n")
par(mfrow=c(1,2))
plot(V~time,data=sim1.sim,type='l',main="Simulated Volatility")
plot(Y_state~time,data=sim1.sim,type='l',main="Simulated Y_state")
plot(sim1.sim)
##--------filtering on simulated data----------##
run_level <- 1
Nas_Np <-          c(100,1e3,5e3)
Nas_Nmif <-        c(10, 100,200)
Nas_Nreps_eval <-  c(4,  10,  20)
Nas_Nreps_local <- c(10, 20, 20)
Nas_Nreps_global <-c(10, 20, 40)
require(doParallel)
registerDoParallel(2)
sim1.filt <- pomp(sim1.sim,
covar=data.frame(
covaryt=c(obs(sim1.sim),NA),
time=c(timezero(sim1.sim),time(sim1.sim))),
tcovar="time",
statenames=Nas_statenames,
paramnames=Nas_paramnames,
covarnames=Nas_covarnames,
rprocess=discrete.time.sim(step.fun=Csnippet(Nas_rproc.filt),delta.t=1)
)
stew(file=sprintf("pf1.rda",run_level),{
t.pf1 <- system.time(
pf1 <- foreach(i=1:Nas_Nreps_eval[run_level],.packages='pomp',
.options.multicore=list(set.seed=TRUE), .export = c('sim1.filt','Nas_Np','run_level')) %dopar% try(
pfilter(sim1.filt,Np=Nas_Np[run_level])
)
)
},seed=493536993,kind="L'Ecuyer")
(L.pf1 <- logmeanexp(sapply(pf1,logLik),se=TRUE))
##---------Fitting the stochastic leverage model to Nasdaq data------------
run_level <- 2
Nas_Np <-          c(100, 1e3, 1e4)
Nas_Nmif <-        c(10, 200, 400)
Nas_Nreps_eval <-  c(4, 10, 20)
Nas_Nreps_local <- c(10, 20, 20)
Nas_Nreps_global <-c(10, 20, 40)
Nas_rw.sd_rp <- 0.001
Nas_rw.sd_ivp <- 0.001
Nas_cooling.fraction.50 <- 0.5
params_test <- c(
sigma_omega = 0.001,
phi = 0.001,
theta = 1,
V_0= 0.02
)
stew(file=sprintf("mif1-%d.rda",run_level),{
t.if1 <- system.time({
if1 <- foreach(i=1:Nas_Nreps_global[run_level],
.packages='pomp', .combine=c,
.options.multicore=list(set.seed=TRUE), .export = c('Nas.filt','Nas_Nmif','run_level','params_test','Nas_Np','Nas_rw.sd_rp','Nas_rw.sd_ivp','Nas_cooling.fraction.50')) %dopar% try(
mif2(Nas.filt,
start=params_test,
Np=Nas_Np[run_level],
Nmif=Nas_Nmif[run_level],
cooling.type="geometric",
cooling.fraction.50=Nas_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
sigma_omega  = Nas_rw.sd_rp,
theta      = Nas_rw.sd_rp,
phi       = Nas_rw.sd_rp,
V_0       = ivp(Nas_rw.sd_ivp)
)
)
)
L.if1 <- foreach(i=1:Nas_Nreps_global[run_level],.packages='pomp',
.combine=rbind,.options.multicore=list(set.seed=TRUE), .export = c('Nas_Nreps_eval','run_level','Nas.filt','Nas_Np')) %dopar%
{
logmeanexp(
replicate(Nas_Nreps_eval[run_level],
logLik(pfilter(Nas.filt,params=coef(if1[[i]]),Np=Nas_Np[run_level]))
),
se=TRUE)
}
})
},seed=318817883,kind="L'Ecuyer")
r.if1 <- data.frame(logLik=L.if1[,1],logLik_se=L.if1[,2],t(sapply(if1,coef)))
if (run_level>1)
write.table(r.if1,file="Nas_params.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
summary(r.if1$logLik,digits=5)
r.if1[which.max(r.if1$logLik),]
pairs(~logLik+sigma_omega+theta+phi,data=r.if1)
plot(if1)
##--------Likelihood maximization using randomized starting values--------##
run_level <- 3
Nas_box <- rbind(
sigma_omega=c(0.001,0.005),
theta    = c(0.9,1),
phi = c(0.001,0.005),
V_0 = c(0.02,0.03)
)
stew(file=sprintf("box_eval-%d.rda",run_level),{
t.box <- system.time({
if.box <- foreach(i=1:Nas_Nreps_global[run_level],.packages='pomp',.combine=c,
.options.multicore=list(set.seed=TRUE), .export = c('if1','Nas_box','Nas_Nreps_eval','run_level')) %dopar%
mif2(
if1[[1]],
start=apply(Nas_box,1,function(x)runif(1,x[1],x[2]))
)
L.box <- foreach(i=1:Nas_Nreps_global[run_level],.packages='pomp',.combine=rbind,
.options.multicore=list(set.seed=TRUE), .export = c('if1','Nas_box','Nas_Nreps_eval','run_level','Nas.filt','Nas_Np')) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Nas_Nreps_eval[run_level],
logLik(pfilter(Nas.filt,params=coef(if.box[[i]]),Np=Nas_Np[run_level]))
),
se=TRUE)
}
})
},seed=290860873,kind="L'Ecuyer")
r.box <- data.frame(logLik=L.box[,1],logLik_se=L.box[,2],t(sapply(if.box,coef)))
if(run_level>1) write.table(r.box,file="Nas_params.csv",append=TRUE,col.names=FALSE,row.names=FALSE)
summary(r.box$logLik,digits=5)
r.box[which.max(r.box$logLik),]
pairs(~logLik+sigma_omega+theta+phi+V_0,data=r.box)
plot(if.box)
library(tseries)
L.garch.benchmark = logLik(garch(Nas_hp))
L.garch.benchmark
knitr::opts_chunk$set(echo = TRUE)
require(pomp)
Nas_statenames <- c("V","Y_state")
require(pomp)
library(pomp)
library(tseries)
library(fGarch)
garch11 = garchFit(~garch(1,1), data = Nas_hp, cond.dist = c("norm"), include.mean = FALSE, algorithm = c("nlminb"), hessian = c("ropt"))
summary(garch11)
library(tseries)
library(fGarch)
garch11 = garchFit(~garch(1,1), data = Nas_hp, cond.dist = c("norm"), include.mean = FALSE, algorithm = c("nlminb"), hessian = c("ropt"))
summary(garch11)
L.garch.benchmark = logLik(garch(Nas_hp))
L.garch.benchmark
setwd("D:/STUDY/graduate/Umich/Study/2018 win/STATS 531/final project")
library(pomp)
