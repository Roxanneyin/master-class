library(Ecdat) # need for the data
library(timeSeries)
library(copula) # for copula functions
library(fGarch) # need for standardized t density
library(MASS) # need for fitdistr and kde2d
library(fCopulae) # additional copula functions
multi_vector = cbind(nas_lreturn, sp400_lreturn)
mean_lreturn = signif(colMeans(multi_vector))
cov_lreturn = signif(cov(multi_vector))
mean_lreturn
cov_lreturn
cor_tau = cor(nas_lreturn, sp400_lreturn, method = "spearman")
omega = cor_tau
omega
dat1 = cbind(pnorm(nas_lreturn, mean = mean_lreturn[1], sd = sqrt(cov_lreturn[1,1])),
pnorm(sp400_lreturn, mean = mean_lreturn[2], sd = sqrt(cov_lreturn[2,2])))
fnorm = fitCopula(data = dat1, copula = normalCopula(0.3, dim = 2),
optim.method = "BFGS", start = 0.5)
fnorm
par(mfrow = c(1,2))
qqnorm(nas_lreturn, main = "Nasdaq-log return")
qqline(nas_lreturn)
qqnorm(sp400_lreturn, main = "SP400-log return")
qqline(sp400_lreturn)
u1 = dat1[,1]
u2 = dat1[,2]
dem = pempiricalCopula(u1,u2)
contour(dem$x, dem$y, dem$z, main = "Empirical-Gaussian",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
cn = normalCopula(fnorm@estimate[1], dim = 2, dispstr = "un")
utdis = rCopula(100000, cn)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "Gauss",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
est.nas = as.numeric(fitdistr(nas_lreturn, "t")$estimate)
est.sp400 = as.numeric(fitdistr(sp400_lreturn, "t")$estimate)
est.nas
est.sp400
# Need to convert to standard deviation for incorporating within "pstd"
est.nas[2] = est.nas[2] * sqrt(est.nas[3] / (est.nas[3]-2))
est.sp400[2] = est.sp400[2] * sqrt(est.sp400[3] / (est.sp400[3]-2))
dat2 = cbind(pstd(nas_lreturn, mean = est.nas[1], sd = est.nas[2], nu = est.nas[3]),
pstd(sp400_lreturn, mean = est.sp400[1],
sd = est.sp400[2], nu = est.sp400[3]))
N = length(nas_lreturn)
quantv = (1/N)*seq(0.5, N - 0.5, 1)
par(mfrow = c(1,2))
qqplot(sort(nas_lreturn), qt(quantv, est.nas[3]), main = 'Nasdaq - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.nas[3]) ~ quantile(nas_lreturn, c(0.25, 0.75))))
qqplot(sort(sp400_lreturn), qt(quantv, est.sp400[3]), main = 'SP400 - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.sp400[3])~quantile(sp400_lreturn, c(0.25, 0.75))))
u1 = dat2[,1]
u2 = dat2[,2]
dem = pempiricalCopula(u1,u2)
# Generating initial estimate of correlation for t-copula
n = length(nas_lreturn)
cop_t_dim2 = tCopula(omega, dim = 2, dispstr = "un", df = 4)
dem = pempiricalCopula(u1,u2)
ft1 = fitCopula(cop_t_dim2, optim.method = "L-BFGS-B", data = dat2)
summary(ft1)
contour(dem$x, dem$y, dem$z, main = "Empirical-t",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
ct = tCopula(ft1@estimate[1], dim = 2, dispstr = "un", df = ft1@estimate[2])
utdis = rCopula(100000, ct)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "t",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
library(mnormt)
df = seq(1, 8, 0.01)
n = length(df)
loglik_max = rep(0, n)
for(i in 1:n){
fit = cov.trob(multi_vector, nu = df[i])
mu = as.vector(fit$center)
sigma = matrix(fit$cov, nrow = 2)
loglik_max[i] = sum(log(dmt(multi_vector, mean = fit$center, S = fit$cov, df = df[i])))
}
plot(df, loglik_max, xlab = 'nu', ylab = 'Profile-likelihood function')
nuest = df[which.max(loglik_max)]
nuest
# which(abs(loglik_max - loglik_max[which.max((loglik_max))]) <= 1.92)
c(df[145], df[226])
CI_left=df[145]
CI_right=df[226]
abline(v = CI_left, lty = 2)
abline(v = CI_right, lty = 2)
data1 = read.csv("Nasdaq_wklydata_92-12.csv", header = T)
data2 = read.csv("SP400Mid_wkly_92-12.csv", header = T)
idx1 = which(is.na(data1$Adj.Close) == FALSE)
idx2 = which(is.na(data2$Adj.Close) == FALSE)
nas = rev(data1$Adj.Close[idx1])
sp400 = rev(data2$Adj.Close[idx2])
nas_lreturn = diff(log(nas))
sp400_lreturn = diff(log(sp400))
library(Ecdat) # need for the data
library(timeSeries)
library(copula) # for copula functions
library(fGarch) # need for standardized t density
library(MASS) # need for fitdistr and kde2d
library(fCopulae) # additional copula functions
multi_vector = cbind(nas_lreturn, sp400_lreturn)
mean_lreturn = signif(colMeans(multi_vector))
cov_lreturn = signif(cov(multi_vector))
mean_lreturn
cov_lreturn
cor_tau = cor(nas_lreturn, sp400_lreturn, method = "spearman")
omega = cor_tau
omega
par(mfrow = c(1,2))
qqnorm(nas_lreturn, main = "Nasdaq-log return")
qqline(nas_lreturn)
qqnorm(sp400_lreturn, main = "SP400-log return")
qqline(sp400_lreturn)
dat1 = cbind(pnorm(nas_lreturn, mean = mean_lreturn[1], sd = sqrt(cov_lreturn[1,1])),
pnorm(sp400_lreturn, mean = mean_lreturn[2], sd = sqrt(cov_lreturn[2,2])))
u1 = dat1[,1]
u2 = dat1[,2]
dem = pempiricalCopula(u1,u2)
contour(dem$x, dem$y, dem$z, main = "Empirical-Gaussian",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
fnorm = fitCopula(data = dat1, copula = normalCopula(0.3, dim = 2),
optim.method = "BFGS", start = 0.5)
summary(fnorm)
cn = normalCopula(fnorm@estimate[1], dim = 2, dispstr = "un")
utdis = rCopula(100000, cn)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "Gauss",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
est.nas = as.numeric(fitdistr(nas_lreturn, "t")$estimate)
est.sp400 = as.numeric(fitdistr(sp400_lreturn, "t")$estimate)
est.nas
est.sp400
# Need to convert to standard deviation for incorporating within "pstd"
est.nas[2] = est.nas[2] * sqrt(est.nas[3] / (est.nas[3]-2))
est.sp400[2] = est.sp400[2] * sqrt(est.sp400[3] / (est.sp400[3]-2))
dat2 = cbind(pstd(nas_lreturn, mean = est.nas[1], sd = est.nas[2], nu = est.nas[3]),
pstd(sp400_lreturn, mean = est.sp400[1],
sd = est.sp400[2], nu = est.sp400[3]))
N = length(nas_lreturn)
quantv = (1/N)*seq(0.5, N - 0.5, 1)
par(mfrow = c(1,2))
qqplot(sort(nas_lreturn), qt(quantv, est.nas[3]), main = 'Nasdaq - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.nas[3]) ~ quantile(nas_lreturn, c(0.25, 0.75))))
qqplot(sort(sp400_lreturn), qt(quantv, est.sp400[3]), main = 'SP400 - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.sp400[3])~quantile(sp400_lreturn, c(0.25, 0.75))))
help(signif)
est.nas = as.numeric(fitdistr(nas_lreturn, "t")$estimate)
est.sp400 = as.numeric(fitdistr(sp400_lreturn, "t")$estimate)
# Need to convert to standard deviation for incorporating within "pstd"
est.nas[2] = est.nas[2] * sqrt(est.nas[3] / (est.nas[3]-2))
est.sp400[2] = est.sp400[2] * sqrt(est.sp400[3] / (est.sp400[3]-2))
est.nas
est.sp400
N = length(nas_lreturn)
quantv = (1/N)*seq(0.5, N - 0.5, 1)
par(mfrow = c(1,2))
qqplot(sort(nas_lreturn), qt(quantv, est.nas[3]), main = 'Nasdaq - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.nas[3]) ~ quantile(nas_lreturn, c(0.25, 0.75))))
qqplot(sort(sp400_lreturn), qt(quantv, est.sp400[3]), main = 'SP400 - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.sp400[3])~quantile(sp400_lreturn, c(0.25, 0.75))))
dat2 = cbind(pstd(nas_lreturn, mean = est.nas[1], sd = est.nas[2], nu = est.nas[3]),
pstd(sp400_lreturn, mean = est.sp400[1],
sd = est.sp400[2], nu = est.sp400[3]))
u1 = dat2[,1]
u2 = dat2[,2]
dem = pempiricalCopula(u1,u2)
# Generating initial estimate of correlation for t-copula
n = length(nas_lreturn)
cop_t_dim2 = tCopula(omega, dim = 2, dispstr = "un", df = 4)
dem = pempiricalCopula(u1,u2)
ft1 = fitCopula(cop_t_dim2, optim.method = "L-BFGS-B", data = dat2)
summary(ft1)
contour(dem$x, dem$y, dem$z, main = "Empirical-t",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
ct = tCopula(ft1@estimate[1], dim = 2, dispstr = "un", df = ft1@estimate[2])
utdis = rCopula(100000, ct)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "t",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
est.nas = as.numeric(fitdistr(nas_lreturn, "normal")$estimate)
est.sp400 = as.numeric(fitdistr(sp400_lreturn, "normal")$estimate)
dat1 = cbind(pnorm(nas_lreturn, mean = est.nas[1], sd = est.nas[2]),
pnorm(sp400_lreturn, mean = est.sp400[1], sd = est.sp400[2]))
u1 = dat1[,1]
u2 = dat1[,2]
dem = pempiricalCopula(u1,u2)
contour(dem$x, dem$y, dem$z, main = "Empirical-Gaussian",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
fnorm = fitCopula(data = dat1, copula = normalCopula(0.3, dim = 2),
optim.method = "BFGS", start = 0.5)
summary(fnorm)
cn = normalCopula(fnorm@estimate[1], dim = 2, dispstr = "un")
utdis = rCopula(100000, cn)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "Gauss",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
corr = sigma[1,2]/(sqrt(sigma[1,1])*sqrt(sigma[2,2]))
corr = cov_lreturn[1,2]/(sqrt(cov_lreturn[1,1])*sqrt(cov_lreturn[2,2]))
corr
knitr::opts_chunk$set(echo = TRUE)
data1 = read.csv("Nasdaq_wklydata_92-12.csv", header = T)
data2 = read.csv("SP400Mid_wkly_92-12.csv", header = T)
idx1 = which(is.na(data1$Adj.Close) == FALSE)
idx2 = which(is.na(data2$Adj.Close) == FALSE)
nas = rev(data1$Adj.Close[idx1])
sp400 = rev(data2$Adj.Close[idx2])
nas_lreturn = diff(log(nas))
sp400_lreturn = diff(log(sp400))
library(Ecdat) # need for the data
library(timeSeries)
library(copula) # for copula functions
library(fGarch) # need for standardized t density
library(MASS) # need for fitdistr and kde2d
library(fCopulae) # additional copula functions
multi_vector = cbind(nas_lreturn, sp400_lreturn)
mean_lreturn = signif(colMeans(multi_vector))
cov_lreturn = signif(cov(multi_vector))
mean_lreturn
cov_lreturn
cor_tau = cor(nas_lreturn, sp400_lreturn, method = "spearman")
omega = cor_tau
omega
par(mfrow = c(1,2))
qqnorm(nas_lreturn, main = "Nasdaq-log return")
qqline(nas_lreturn)
qqnorm(sp400_lreturn, main = "SP400-log return")
qqline(sp400_lreturn)
corr = cov_lreturn[1,2]/(sqrt(cov_lreturn[1,1])*sqrt(cov_lreturn[2,2]))
dat1 = cbind(pnorm(nas_lreturn, mean = est.nas[1], sd = est.nas[2]),
pnorm(sp400_lreturn, mean = est.sp400[1], sd = est.sp400[2]))
corr = cov_lreturn[1,2]/(sqrt(cov_lreturn[1,1])*sqrt(cov_lreturn[2,2]))
dat1 = cbind(pnorm(nas_lreturn, mean = mean_lreturn[1], sd = sqrt(cov_lreturn[1,1])),
pnorm(sp400_lreturn, mean =mean_lreturn, sd = sqrt(cov_lreturn[2,2])))
# empirical copula
u1 = dat1[,1]
u2 = dat1[,2]
dem = pempiricalCopula(u1,u2)
contour(dem$x, dem$y, dem$z, main = "Empirical-Gaussian",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
# theoretical copula
cn = normalCopula(corr, dim = 2, dispstr = "un")
utdis = rCopula(100000, cn)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "Gauss",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
corr
library(mnormt)
df = seq(1, 8, 0.01)
n = length(df)
loglik_max = rep(0, n)
for(i in 1:n){
fit = cov.trob(multi_vector, nu = df[i])
mu = as.vector(fit$center)
sigma = matrix(fit$cov, nrow = 2)
loglik_max[i] = sum(log(dmt(multi_vector, mean = fit$center, S = fit$cov, df = df[i])))
}
plot(df, loglik_max, xlab = 'nu', ylab = 'Profile-likelihood function')
nuest = df[which.max(loglik_max)]
nuest
# using the code:
# which(abs(loglik_max - loglik_max[which.max((loglik_max))]) <= 1.92)
# and we find that the interval should begin with 145 and end with 226
# where 1.92 is computed by 1/2*chi-square(95%)
c(df[145], df[226])
CI_left=df[145]
CI_right=df[226]
abline(v = CI_left, lty = 2)
abline(v = CI_right, lty = 2)
fitfinal = cov.trob(cbind(nas_lreturn, sp400_lreturn), nu = nuest)
mu = fitfinal$center
sigma = fitfianl$cov
sigma = fitfinal$cov
mu
sigma
sigma = fitfinal$cov
mu
sigma
est.nas = as.numeric(c(mu[1], sigma[1,1], nuest))
est.sp400 = as.numeric(c(mu[2], sigma[2,2], nuest))
# Need to convert to standard deviation for incorporating within "pstd"
est.nas[2] = est.nas[2] * sqrt(est.nas[3] / (est.nas[3]-2))
est.sp400[2] = est.sp400[2] * sqrt(est.sp400[3] / (est.sp400[3]-2))
N = length(nas_lreturn)
quantv = (1/N)*seq(0.5, N - 0.5, 1)
par(mfrow = c(1,2))
qqplot(sort(nas_lreturn), qt(quantv, est.nas[3]), main = 'Nasdaq - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.nas[3]) ~ quantile(nas_lreturn, c(0.25, 0.75))))
qqplot(sort(sp400_lreturn), qt(quantv, est.sp400[3]), main = 'SP400 - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.sp400[3])~quantile(sp400_lreturn, c(0.25, 0.75))))
corr = sigma[1,2]/(sqrt(sigma[1,1])*sqrt(sigma[2,2]))
corr
corr = sigma[1,2]/(sqrt(sigma[1,1])*sqrt(sigma[2,2]))
dat2 = cbind(pstd(nas_lreturn, mean = mu[1], sd = sigma[1,1], nu = nuest),
pstd(sp400_lreturn, mean = mu[1],
sd = sigma[2,2], nu = nuest))
# empirical cdf
u1 = dat2[,1]
u2 = dat2[,2]
dem = pempiricalCopula(u1,u2)
contour(dem$x, dem$y, dem$z, main = "Empirical-t",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
# Generating initial estimate of correlation for t-copula
n = length(nas_lreturn)
ct = tCopula(corr, dim = 2, dispstr = "un", df = nuest)
utdis = rCopula(100000, ct)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "t",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
corr = sigma[1,2]/(sqrt(sigma[1,1])*sqrt(sigma[2,2]))
dat2 = cbind(pt(nas_lreturn, mean = mu[1], sd = sigma[1,1], nu = nuest),
pt(sp400_lreturn, mean = mu[1],
sd = sigma[2,2], nu = nuest))
est.nas = as.numeric(c(mu[1], sqrt(sigma[1,1]), nuest))
est.sp400 = as.numeric(c(mu[2], sqrt(sigma[2,2]), nuest))
# Need to convert to standard deviation for incorporating within "pstd"
est.nas[2] = est.nas[2] * sqrt(est.nas[3] / (est.nas[3]-2))
est.sp400[2] = est.sp400[2] * sqrt(est.sp400[3] / (est.sp400[3]-2))
N = length(nas_lreturn)
quantv = (1/N)*seq(0.5, N - 0.5, 1)
par(mfrow = c(1,2))
qqplot(sort(nas_lreturn), qt(quantv, est.nas[3]), main = 'Nasdaq - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.nas[3]) ~ quantile(nas_lreturn, c(0.25, 0.75))))
qqplot(sort(sp400_lreturn), qt(quantv, est.sp400[3]), main = 'SP400 - QQ plot for t-dist')
abline(lm(qt(c(0.25, 0.75), est.sp400[3])~quantile(sp400_lreturn, c(0.25, 0.75))))
corr = sigma[1,2]/(sqrt(sigma[1,1])*sqrt(sigma[2,2]))
dat2 = cbind(pstd(nas_lreturn, mean = est.nas[1], sd = est.nas[2], nu = est.nas[3]),
pstd(sp400_lreturn, mean = est.sp400[1],
sd = est.sp400[2], nu = est.sp400[3]))
# empirical cdf
u1 = dat2[,1]
u2 = dat2[,2]
dem = pempiricalCopula(u1,u2)
contour(dem$x, dem$y, dem$z, main = "Empirical-t",
col = 'blue', lty = 1, lwd = 2, nlevel = 20)
# Generating initial estimate of correlation for t-copula
n = length(nas_lreturn)
ct = tCopula(corr, dim = 2, dispstr = "un", df = nuest)
utdis = rCopula(100000, ct)
demt = pempiricalCopula(utdis[,1], utdis[,2])
contour(demt$x, demt$y, demt$z, main = "t",
col = 'red', lty = 2, lwd = 2, add = TRUE, nlevel = 20)
corr
AIC_norm = -2*sum(log(dmvnorm(x = cbind(nas_lreturn, sp400_lreturn), mean = mean_lreturn, sigma = cov_lreturn))) + 2*5
help("dmvnorm")
library(mvtnorm)
AIC_norm = -2*sum(log(dmvnorm(x = cbind(nas_lreturn, sp400_lreturn), mean = mean_lreturn, sigma = cov_lreturn))) + 2*5
AIC_t = -2*max(loglik_max) + 2*6
set.seed(12345678)
uvsim1 = rCopula(1000000, cn)
data_sim1 = cbind(qnorm(uvsim1[,1], mean = mean_lreturn[1], sd = sqrt(cov_lreturn[1,1])),
qnorm(uvsim1[,2], mean = mean_lreturn[2], sd = sqrt(cov_lreturn[2,2])))
datat1 = 0.5 *data_sim1[,1] + 0.5 * data_sim1[,2]
VaR1 = -quantile(datat1, 0.001) * 10^7
cov_lreturn[1,2]
cov_lreturn[2,1]
help(qnorm)
set.seed(12345678)
w = 0.5
mu1 = w*mean_lreturn[1]+(1-w)*mean_lreturn[2]
sd1 = sqrt(0.5^2*cov_lreturn[1,1] + 0.5^2*cov_lreturn[2,2]+2*0.5^2*cov_lreturn[1,2])
VaR1 = -(exp(qnorm(0.001, mu1, sd1)) - 1)*10^7
VaR1
mu
set.seed(12345678)
w = 0.5
mu_t = w*mu[1]+(1-w)*mu[2]
sd_t = sqrt(0.5^2*sigma[1,1] + 0.5^2*sigma[2,2]+2*0.5^2*sigma[1,2])
VaR = -(exp((qt(0.001,nuest)*sd_t+mu_t)-1)*10^7)
VaR
NUEST
nuest
qt(0.001,nuest)
qt(0.001,nuest)*sd_t+mu_t
exp((qt(0.001,nuest)*sd_t+mu_t)-1
)
sd_t
mu
set.seed(12345678)
w = 0.5
mu_t = w*mu[1]+(1-w)*mu[2]
sd_t = sqrt(0.5^2*sigma[1,1] + 0.5^2*sigma[2,2]+2*0.5^2*sigma[1,2])
VaR = -(exp(qt(0.001,nuest)*sd_t+mu_t)-1)*10^7
VaR
set.seed(12345678)
uvsim = rCopula(1000000, ct)
w = seq(0, 1, 0.01)
n = length(w)
VaRv = rep(0, n)
varv = rep(0, n)
expection = rep(0, n)
data_sim = cbind(qstd(uvsim[,1], mean = est.nas[1], sd = est.nas[2], nu = est.nas[3]),
qstd(uvsim[,2], mean = est.sp400[1], sd = est.sp400[2], nu = est.sp400[3]))
for (i in 1:n){
datat = w[i] *data_sim[,1] + (1 - w[i]) * data_sim[,2];
VaRv[i] = -quantile(datat, 0.002)
varv[i] = var(datat)
expection[i] = mean(datat)
}
plot(w, expection, xlab = 'w', ylab = 'expection', main = "Expected return vs. w")
plot(w, varv, xlab = 'w', ylab = 'Var', main = "Volatility vs. w")
plot(w, VaRv, xlab = 'w', ylab = 'VaR', main = "VaR vs. w")
wmax_expe = w[which.max(expection)]
wmin_vol = w[which.min(varv)]
wmin_VaR = w[which.min(VaRv)]
expe = expection[wmax_expe]
vol = varv[wmin_vol]
VaR = VaRv[wmin_VaR]
c(wmax_expe, expe)
c(wmin_vol, vol)
c(wmin_VaR, VaR)
set.seed(12345678)
uvsim = rCopula(1000000, ct)
w = seq(0, 1, 0.01)
n = length(w)
VaRv = rep(0, n)
varv = rep(0, n)
expection = rep(0, n)
data_sim = cbind(qstd(uvsim[,1], mean = est.nas[1], sd = est.nas[2], nu = est.nas[3]),
qstd(uvsim[,2], mean = est.sp400[1], sd = est.sp400[2], nu = est.sp400[3]))
for (i in 1:n){
datat = w[i] *data_sim[,1] + (1 - w[i]) * data_sim[,2];
VaRv[i] = -(exp(quantile(datat, 0.002))-1)
varv[i] = var(datat)
expection[i] = mean(datat)
}
plot(w, expection, xlab = 'w', ylab = 'expection', main = "Expected return vs. w")
plot(w, varv, xlab = 'w', ylab = 'Var', main = "Volatility vs. w")
plot(w, VaRv, xlab = 'w', ylab = 'VaR', main = "VaR vs. w")
wmax_expe = w[which.max(expection)]
wmin_vol = w[which.min(varv)]
wmin_VaR = w[which.min(VaRv)]
expe = expection[wmax_expe]
vol = varv[wmin_vol]
VaR = VaRv[wmin_VaR]
c(wmax_expe, expe)
c(wmin_vol, vol)
c(wmin_VaR, VaR)
VaRv[wmin_VaR]
varv[wmin_vol]
dist_portpolio = function(w){
mu_portfoilio = w*mu[1]+(1-w)*mu[2]
sd_portfoilio = sqrt(w^2*sigma[1,1]
+(1-w)^2*sigma[2,2]+2*w*(1-w)*sigma[2,1])
return(c(mu_portfoilio,sd_portfoilio))
}
set.seed(12345678)
w = seq(0, 1, 0.01)
n = length(w)
VaRv = rep(0, n)
varv = rep(0, n)
expection = rep(0, n)
for (i in 1:n){
x = dist_portpolio(w[i])
expection[i] = dist_portpolio(w[i])[1]
varv[i] = dist_portpolio(w[i])[2]
VaRv[i] = -(exp(qt(0.002, df = nuest)*x[2]+x[1])-1)
}
plot(w, expection)
plot(w, varv)
plot(w, VaRv)
w[which.max(expection)]
w[which.min(vol)]
w[which.min(VaRv)]
varv
dist_portpolio = function(w){
mu_portfoilio = w*mu[1]+(1-w)*mu[2]
sd_portfoilio = sqrt(w^2*sigma[1,1]
+(1-w)^2*sigma[2,2]+2*w*(1-w)*sigma[2,1])
return(c(mu_portfoilio,sd_portfoilio))
}
set.seed(12345678)
w = seq(0, 1, 0.01)
n = length(w)
VaRv = rep(0, n)
varv = rep(0, n)
expection = rep(0, n)
for (i in 1:n){
x = dist_portpolio(w[i])
expection[i] = dist_portpolio(w[i])[1]
varv[i] = dist_portpolio(w[i])[2]
VaRv[i] = -(exp(qt(0.002, df = nuest)*x[2]+x[1])-1)
}
plot(w, expection)
plot(w, varv)
plot(w, VaRv)
w[which.max(expection)]
w[which.min(varv)]
w[which.min(VaRv)]
dist_portpolio = function(w){
mu_portfoilio = w*mean_lreturn[1]+(1-w)*mean_lreturn[2]
sd_portfoilio = sqrt(w^2*cov_lreturn[1,1]
+(1-w)^2*cov_lreturn[2,2]+2*w*(1-w)*cov_lreturn[2,1])
return(c(mu_portfoilio,sd_portfoilio))
}
set.seed(12345678)
w = seq(0, 1, 0.01)
n = length(w)
VaRv = rep(0, n)
varv = rep(0, n)
expection = rep(0, n)
for (i in 1:n){
x = dist_portpolio(w[i])
expection[i] = dist_portpolio(w[i])[1]
varv[i] = dist_portpolio(w[i])[2]
VaRv[i] = -(exp(qnorm(0.002, dist_portpolio(w[i])[1], dist_portpolio(w[i])[2]))-1)
}
plot(w, expection)
plot(w, varv)
plot(w, VaRv)
w[which.max(expection)]
w[which.min(varv)]
w[which.min(VaRv)]
