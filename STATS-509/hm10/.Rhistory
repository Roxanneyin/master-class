arima112
# AR root is out side the unit circle
MA_roots <- polyroot(c(1,coef(arima112)[c("ma1","ma2")]))
MA_roots
plot(arima112$resid,ylab = "residuals",main = "Residuals for ARIMA(1,1,2) Model with volume parameter")
acf(arima112$resid,main = "ACF of residuals with volume parameter")
qqnorm(arima112$resid)
qqline(arima112$resid,probs = c(0.25,0.75))
volume = log(as.numeric(dat$Open))
vol_train = log(volume[1:floor(0.9*length(price))])
vol_test = log(volume[floor(0.9*length(price)):length(price)])
aic_table <- function(data,data2,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q),xreg=data2)$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
price_aic_table2 <- aic_table(dat_train,vol_train,4,4)
require(knitr)
kable(price_aic_table2,digits=2)
arima112 <- arima(dat_train,order = c(2,1,3),xreg = vol_train)############
arima112
plot(arima112$resid,ylab = "residuals",main = "Residuals for ARIMA(1,1,2) Model with volume parameter")
acf(arima112$resid,main = "ACF of residuals with volume parameter")
qqnorm(arima112$resid)
qqline(arima112$resid,probs = c(0.25,0.75))
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv(file="NDAQ.csv",header=TRUE)
date <- as.Date(dat$Date)
price <- as.numeric(dat$Adj.Close)
summary(price)
plot(date,log(price),type="l",ylab="log(Adjusted Price)",main = "Nasdaq index")
abline(h=mean(log(price)),col = "blue")
N <- nrow(dat)
mu = mean(diff(log(price)))
sigma = sd(diff(log(price)))
set.seed(20180301)
X1 <- log(price[1])+cumsum(c(0,rnorm(N-1,mean=mu,sd=sigma)))
set.seed(03012018)
X2 <- log(price[1])+cumsum(c(0,rnorm(N-1,mean=mu,sd=sigma)))
par(mfrow=c(1,2))
plot(X1,type="l")
plot(X2,type="l")
z = diff(log(price))
acf(z)
acf(abs(z-mean(z)),lag.max=200)
dat_train = log(price[1:floor(0.9*length(price))])
dat_test = log(price[floor(0.9*length(price)):length(price)])
t = seq(from=1,length=floor(0.9*N)-1,by=1)
detrend_dat = diff(dat_train)
plot(t,detrend_dat,type="l",xlab="t",ylab="difference of log price",main = "Detrending Nasdaq index with d = 1")
abline(h=mean(detrend_dat),col = "blue")
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q))$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
price_aic_table <- aic_table(dat_train,4,4)
require(knitr)
kable(price_aic_table,digits=2)
price_arma12 = arima(dat_train,order=c(1,1,2)); price_arma12
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv(file="NDAQ.csv",header=TRUE)
date <- as.Date(dat$Date)
price <- as.numeric(dat$Adj.Close)
summary(price)
plot(date,log(price),type="l",ylab="log(Adjusted Price)",main = "Nasdaq index")
abline(h=mean(log(price)),col = "blue")
N <- nrow(dat)
mu = mean(diff(log(price)))
sigma = sd(diff(log(price)))
set.seed(20180301)
X1 <- log(price[1])+cumsum(c(0,rnorm(N-1,mean=mu,sd=sigma)))
set.seed(03012018)
X2 <- log(price[1])+cumsum(c(0,rnorm(N-1,mean=mu,sd=sigma)))
par(mfrow=c(1,2))
plot(X1,type="l")
plot(X2,type="l")
z = diff(log(price))
acf(z)
acf(abs(z-mean(z)),lag.max=200)
dat_train = log(price[1:floor(0.9*length(price))])
dat_test = log(price[floor(0.9*length(price)):length(price)])
t = seq(from=1,length=floor(0.9*N)-1,by=1)
detrend_dat = diff(dat_train)
plot(t,detrend_dat,type="l",xlab="t",ylab="difference of log price",main = "Detrending Nasdaq index with d = 1")
abline(h=mean(detrend_dat),col = "blue")
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q))$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
price_aic_table <- aic_table(dat_train,4,4)
require(knitr)
kable(price_aic_table,digits=2)
price_arma12 = arima(dat_train,order=c(1,1,2)); price_arma12
price_arma21 = arima(dat_train,order=c(2,1,1)); price_arma21
# AR root for ARIMA(1,1,2) is outside of unit circle
MA_roots <- polyroot(c(1, coef(price_arma12)[c("ma1", "ma2")]))
MA_roots # MA root for ARIMA(1,1,2)
# MA root for ARIMA(2,1,1) is outside of unit circle
AR_roots <- polyroot(c(1, -coef(price_arma21)[c("ar1", "ar2")]))
AR_roots # AR root for ARIMA(2,1,1)
spectrum_price <-ts(dat_train,frequency=250)
spectrum(spectrum_price,spans=c(3,5,3))
par(mfrow = c(1,2))
plot(price_arma12$resid,ylab = "residuals",main = "Residuals for ARIMA(1,1,2) Model")
acf(price_arma12$resid,main = "ACF of residuals for ARIMA(1,1,2)")
par(mfrow = c(1,2))
plot(price_arma21$resid,ylab = "residuals",main = "Residuals for ARIMA(2,1,1) Model")
acf(price_arma21$resid,main = "ACF of residuals for ARIMA(2,1,1)")
par(mfrow = c(1,2))
qqnorm(price_arma12$resid)
qqline(price_arma12$resid,probs = c(0.25,0.75))
qqnorm(price_arma21$resid)
qqline(price_arma21$resid,probs = c(0.25,0.75))
library(forecast)
pred = predict(price_arma12, n.ahead = (N-floor(0.9*N)+1))$pred
forecast1 = forecast(price_arma12, h = 25)
plot(forecast1)
x = c((N-floor(0.1*N)-1):N)
lines(x, dat_test, type="l", col="red")
volume = log(as.numeric(dat$Volume))
vol_train = log(volume[1:floor(0.9*length(price))])
vol_test = log(volume[floor(0.9*length(price)):length(price)])
aic_table <- function(data,data2,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q),xreg=data2)$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
price_aic_table2 <- aic_table(dat_train,vol_train,4,4)
require(knitr)
kable(price_aic_table2,digits=2)
arima112 <- arima(dat_train,order = c(1,1,2),xreg = vol_train)
arima112
# AR root is outside the unit circle
MA_roots <- polyroot(c(1,coef(arima112)[c("ma1","ma2")]))
MA_roots # MA roots are outside the unit circle
plot(arima112$resid,ylab = "residuals",main = "Residuals for ARIMA(1,1,2) Model with volume parameter")
acf(arima112$resid,main = "ACF of residuals with volume parameter")
library(forecast)
pred = predict(airma112, n.ahead = (N-floor(0.9*N)+1))$pred
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv(file="NDAQ.csv",header=TRUE)
date <- as.Date(dat$Date)
price <- as.numeric(dat$Adj.Close)
summary(price)
plot(date,log(price),type="l",ylab="log(Adjusted Price)",main = "Nasdaq index")
abline(h=mean(log(price)),col = "blue")
N <- nrow(dat)
mu = mean(diff(log(price)))
sigma = sd(diff(log(price)))
set.seed(20180301)
X1 <- log(price[1])+cumsum(c(0,rnorm(N-1,mean=mu,sd=sigma)))
set.seed(03012018)
X2 <- log(price[1])+cumsum(c(0,rnorm(N-1,mean=mu,sd=sigma)))
par(mfrow=c(1,2))
plot(X1,type="l")
plot(X2,type="l")
z = diff(log(price))
acf(z)
acf(abs(z-mean(z)),lag.max=200)
dat_train = log(price[1:floor(0.9*length(price))])
dat_test = log(price[floor(0.9*length(price)):length(price)])
t = seq(from=1,length=floor(0.9*N)-1,by=1)
detrend_dat = diff(dat_train)
plot(t,detrend_dat,type="l",xlab="t",ylab="difference of log price",main = "Detrending Nasdaq index with d = 1")
abline(h=mean(detrend_dat),col = "blue")
aic_table <- function(data,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q))$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
price_aic_table <- aic_table(dat_train,4,4)
require(knitr)
kable(price_aic_table,digits=2)
price_arma12 = arima(dat_train,order=c(1,1,2)); price_arma12
price_arma21 = arima(dat_train,order=c(2,1,1)); price_arma21
# AR root for ARIMA(1,1,2) is outside of unit circle
MA_roots <- polyroot(c(1, coef(price_arma12)[c("ma1", "ma2")]))
MA_roots # MA root for ARIMA(1,1,2)
# MA root for ARIMA(2,1,1) is outside of unit circle
AR_roots <- polyroot(c(1, -coef(price_arma21)[c("ar1", "ar2")]))
AR_roots # AR root for ARIMA(2,1,1)
spectrum_price <-ts(dat_train,frequency=250)
spectrum(spectrum_price,spans=c(3,5,3))
par(mfrow = c(1,2))
plot(price_arma12$resid,ylab = "residuals",main = "Residuals for ARIMA(1,1,2) Model")
acf(price_arma12$resid,main = "ACF of residuals for ARIMA(1,1,2)")
par(mfrow = c(1,2))
plot(price_arma21$resid,ylab = "residuals",main = "Residuals for ARIMA(2,1,1) Model")
acf(price_arma21$resid,main = "ACF of residuals for ARIMA(2,1,1)")
par(mfrow = c(1,2))
qqnorm(price_arma12$resid)
qqline(price_arma12$resid,probs = c(0.25,0.75))
qqnorm(price_arma21$resid)
qqline(price_arma21$resid,probs = c(0.25,0.75))
library(forecast)
pred = predict(price_arma12, n.ahead = (N-floor(0.9*N)+1))$pred
forecast1 = forecast(price_arma12, h = 25)
plot(forecast1)
x = c((N-floor(0.1*N)-1):N)
lines(x, dat_test, type="l", col="red")
volume = log(as.numeric(dat$Volume))
vol_train = log(volume[1:floor(0.9*length(price))])
vol_test = log(volume[floor(0.9*length(price)):length(price)])
aic_table <- function(data,data2,P,Q){
table <- matrix(NA,(P+1),(Q+1))
for(p in 0:P) {
for(q in 0:Q) {
table[p+1,q+1] <- arima(data,order=c(p,1,q),xreg=data2)$aic
}
}
dimnames(table) <- list(paste("<b> AR",0:P, "</b>", sep=""),paste("MA",0:Q,sep=""))
table
}
price_aic_table2 <- aic_table(dat_train,vol_train,4,4)
require(knitr)
kable(price_aic_table2,digits=2)
arima112 <- arima(dat_train,order = c(1,1,2),xreg = vol_train)
arima112
# AR root is outside the unit circle
MA_roots <- polyroot(c(1,coef(arima112)[c("ma1","ma2")]))
MA_roots # MA roots are outside the unit circle
plot(arima112$resid,ylab = "residuals",main = "Residuals for ARIMA(1,1,2) Model with volume parameter")
acf(arima112$resid,main = "ACF of residuals with volume parameter")
qqnorm(arima112$resid)
qqline(arima112$resid,probs = c(0.25,0.75))
library(forecast)
pred = predict(arima112, n.ahead = (N-floor(0.9*N)+1))$pred
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv(file="NDAQ.csv",header=TRUE)
head(dat)
date <- as.Date(dat$Date)
price <- as.numeric(dat$Adj.Close)
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv(file="NDAQ.csv",header=TRUE)
head(dat)
date <- as.Date(dat$Date)
price <- as.numeric(dat$Adj.Close)
summary(price)
plot(date,log(price),type="l",ylab="log(Adjusted Price)",main = "Nasdaq index")
abline(h=mean(log(price)),col = "blue")
u1 = log(price)
u_low <- ts(loess(u1~date,span=0.5)$fitted,frequency=12)
knitr::opts_chunk$set(echo = TRUE)
library(Ecdat)
data(CRSPday)
library(Ecdat)
data(CRSPday)
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
acf(crsp)
acf(as.numeric(crsp))
crsp
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
acf(crsp)
acf(as.numeric(crsp))
knitr::opts_chunk$set(echo = TRUE)
library(Ecdat)
data(CRSPday)
crsp=CRSPday[,7]
acf(crsp)
acf(as.numeric(crsp))
data1 = read.csv("Nasdaq_wklydata_92-12.csv", header = T)
data2 = read.csv("SP400Mid_wkly_92-12.csv", header = T)
idx1 = which(is.na(data1$Adj.Close) == FALSE)
idx2 = which(is.na(data2$Adj.Close) == FALSE)
nas = rev(data1$Adj.Close[idx1])
sp400 = rev(data2$Adj.Close[idx2])
nas_lreturn = diff(log(nas))
sp400_lreturn = diff(log(sp400))
acf(as.vector(data1))
acf(as.vector(data2))
acf(as.vector(nas))
acf(as.vector(sp400))
acf(as.numeric(nas))
acf(as.vector(sp400))
Box.test(nas, lag = 10, type = 'Ljung')
Box.test(sp400, lag = 10, type = 'Ljung')
acf(as.vector(nas))
acf(as.vector(sp400))
acf(as.vector(abs(nas)))
acf(as.vector(abs(sp400)))
data1 = read.csv("Nasdaq_wklydata_92-12.csv", header = T)
data2 = read.csv("SP400Mid_wkly_92-12.csv", header = T)
idx1 = which(is.na(data1$Adj.Close) == FALSE)
idx2 = which(is.na(data2$Adj.Close) == FALSE)
nas = rev(data1$Adj.Close[idx1])
sp400 = rev(data2$Adj.Close[idx2])
nas_lreturn = diff(log(nas))
sp400_lreturn = diff(log(sp400))
nas_return = exp(nas_lreturn) - 1
sp400_return = exp(sp400_lreturn) - 1
acf(as.vector(nas_return), lag = 20, main = 'Nasdaq')
acf(as.vector(sp400_return), lag = 20, main = 'SP400')
acf(as.vector(nas_return), main = 'Nasdaq')
acf(as.vector(sp400_return), main = 'SP400')
acf(as.vector(nas_return), lag = 20, main = 'Nasdaq')
acf(as.vector(sp400_return), lag = 20, main = 'SP400')
Box.test(nas_return, lag = 10, type = 'Ljung')
Box.test(sp400_return, lag = 10, type = 'Ljung')
Box.test(nas_return, lag = 15, type = 'Ljung')
Box.test(sp400_return, lag = 15, type = 'Ljung')
Box.test(nas_return, lag = 20, type = 'Ljung')
Box.test(sp400_return, lag = 20, type = 'Ljung')
Box.test(nas_return, lag = 20, type = 'Ljung')
Box.test(sp400_return, lag = 10, type = 'Ljung')
Box.test(nas_return, lag = 20, type = 'Ljung')
Box.test(sp400_return, lag = 20, type = 'Ljung')
Box.test(nas_return, lag = 10, type = 'Ljung')
Box.test(sp400_return, lag = 10, type = 'Ljung')
Box.test(nas_return, lag = 10, type = 'Ljung')
Box.test(sp400_return, lag = 15, type = 'Ljung')
acf(as.vector(abs(nas_return)), lag = 20, main = 'Nasdaq')
acf(as.vector(abs(sp400_return)), lag = 20, main = 'SP400')
acf(as.vector(nas), lag = 20, main = 'Nasdaq')
acf(as.vector(sp400), lag = 20, main = 'Nasdaq')
1/0.004
Box.test(nas_return, lag = 10, type = 'Ljung')
Box.test(sp400_return, lag = 10, type = 'Ljung')
update.packages()
y
y
y
y
y
y
y
y
y
y
y
y
source("https://ionides.github.io/531w18/hw07/packages.R",echo=TRUE)
source("https://ionides.github.io/531w18/hw07/pompTest.R",echo=TRUE)
source("https://ionides.github.io/531w18/hw07/helloC.R",echo=TRUE)
source("https://ionides.github.io/531w18/hw07/pompTest.R",echo=TRUE)
update.packages()
source("https://ionides.github.io/531w18/hw07/packages.R",echo=TRUE)
source("https://ionides.github.io/531w18/hw07/pompTest.R",echo=TRUE)
source("https://ionides.github.io/531w18/hw07/helloC.R",echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2016)
p = pomp(dat,times="year",t0=1959)
plot(p)
help("pomp")
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2018531)
parus = pomp(dat,times="year",t0=1959)
plot(parus)
skel = Csnippet("DN=r*N*exp(-N/k);")
parus = pomp(parus,skeleton=skel,skeleton.type='map',paramnames=c("r","k"),statenames=c("N"))
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2018531)
parus = pomp(dat,times="year",t0=1959)
plot(parus)
skel = Csnippet("DN=r*N*exp(-N/k);")
parus = pomp(parus,skeleton=skel,skeleton.type='map',paramnames=c("r","k"),statenames=c("N"))
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2018531)
parus = pomp(dat,times="year",t0=1959)
plot(parus)
skel = Csnippet("DN=r*N*exp(-N/k);")
parus = pomp(parus,skeleton=skel,paramnames=c("r","k"),statenames=c("N"))
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("https://ionides.github.io/531w18/10/parus.csv")
require(pomp)
require(ggplot2)
set.seed(2018531)
parus = pomp(dat,times="year",t0=1959)
plot(parus)
skel = Csnippet("DN=r*N*exp(-N/k);")
parus = pomp(parus,skeleton=skel,skeleton.type='map',paramnames=c("r","k"),statenames=c("N"))
require(pomp)
library(pomp)
skel = Csnippet("DN=r*N*exp(-N/k);")
parus = pomp(parus,skeleton=skel,skeleton.type='map',paramnames=c("r","k"),statenames=c("N"))
setwd("D:/STUDY/graduate/Umich/Study/2018 win/STATS 509/hm10")
help(garch)
knitr::opts_chunk$set(echo = TRUE)
library(fGarch)
knitr::opts_chunk$set(echo = TRUE)
help("garchFit")
library(fGarch)
grach11 = garch(NYSE_lret.ts, order = c(1,1), coef = NULL, itmax = 200, eps = NULL, grad = c("analytic"))
install.packages("TSA", lib="D:/APPLICATIONS/R-3.4.3/library")
library(TSA)
grach11 = garch(NYSE_lret.ts, order = c(1,1), coef = NULL, itmax = 200, eps = NULL, grad = c("analytic"))
data = read.csv("NYA-2015-2017.csv", header = TRUE)
NYSE_lret = diff(log(X$AdjClose))
data = read.csv("NYA-2015-2017.csv", header = TRUE)
NYSE_lret = diff(log(data$AdjClose))
data = read.csv("NYA-2015-2017.csv", header = TRUE)
NYSE_lret = diff(log(data$Adj.Close))
NYSE_lret.ts = ts(data = NYSE_lret, start = c(2015,1), frequency = 252, names = c('logret'))
library(TSA)
grach11 = garch(NYSE_lret.ts, order = c(1,1), coef = NULL, itmax = 200, eps = NULL, grad = c("analytic"))
summary(grach11)
help(""garch")
help(garch")
d
asef
o_)
"
help("garch")
1.659e-01+7.875e-01
lambda = 0.9534
lambda^2
lambda^6
lambda^9
lambda^10
lambda^15
lambda^14
u = predict(garch11)
library(TSA)
garch11 = garch(NYSE_lret.ts, order = c(1,1), coef = NULL, itmax = 200, eps = NULL, grad = c("analytic"))
summary(grach11)
u = predict(garch11)
plot(c(1:1000), NYSE_lret.ts[C(1:1000)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
u = predict(garch11)
plot(c(1:1000), NYSE_lret.ts[c(1:1000)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:1000), u[c(1:1000),1], lwd = 2, lty = 1, col = 'blue')
u = predict(garch11)
plot(c(1:800), NYSE_lret.ts[c(1:800)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:800), u[c(1:800),1], lwd = 2, lty = 1, col = 'blue')
u = predict(garch11)
plot(c(1:755), NYSE_lret.ts[c(1:755)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:755), u[c(1:755),1], lwd = 2, lty = 1, col = 'blue')
u
u[c(1:755),1]
u[c(1:755),2]
u[,2]
u = predict(garch11)
plot(c(1:755), NYSE_lret.ts[c(1:755)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:755), u[,1], lwd = 2, lty = 1, col = 'blue')
u = predict(garch11)
plot(c(1:754), NYSE_lret.ts[c(1:754)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:754), u[c(1:754),1], lwd = 2, lty = 1, col = 'blue')
lines(c(1:754), u[c(1:754),2], lwd = 2, lty = 1, col = 'blue')
a=c(1,2,5)
b = c(8,3,1)
a/b
u = predict(garch11)
plot(c(1:754), NYSE_lret.ts[c(1:754)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:754), u[c(1:754),1], lwd = 2, lty = 1, col = 'blue')
lines(c(1:754), u[c(1:754),2], lwd = 2, lty = 1, col = 'blue')
r = NYSE_lret.ts/u[,1]
plot(c(1:754), r, lwd = 2, lty = 1, col = 'blue')
u = predict(garch11)
plot(c(1:754), NYSE_lret.ts[c(1:754)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:754), u[c(1:754),1], lwd = 2, lty = 1, col = 'blue')
lines(c(1:754), u[c(1:754),2], lwd = 2, lty = 1, col = 'blue')
r = NYSE_lret.ts/u[,1]
plot(r, lwd = 2, lty = 1, col = 'blue')
u = predict(garch11)
plot(c(1:754), NYSE_lret.ts[c(1:754)], type = 'l', xlab = 'Time', ylab = 'NYSE Log Returns')
lines(c(1:754), u[c(1:754),1], lwd = 2, lty = 1, col = 'blue')
lines(c(1:754), u[c(1:754),2], lwd = 2, lty = 1, col = 'blue')
r = NYSE_lret.ts/u[,1]
plot(r, lwd = 2, lty = 1)
u = predict(garch11)
plot(c(1:754), NYSE_lret.ts[c(1:754)], type = 'l', xlab = 'Time', ylab = 'estimated sigma')
lines(c(1:754), u[c(1:754),1], lwd = 2, lty = 1, col = 'blue')
lines(c(1:754), u[c(1:754),2], lwd = 2, lty = 1, col = 'blue')
r = NYSE_lret.ts/u[,1]
plot(r, lwd = 2, lty = 1, xlab = 'Time', ylab = 'estimated residuals')
tsdiag(garch11)
plot(garch11)
