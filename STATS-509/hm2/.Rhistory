n1 = n1 + 1
}
}
expection1 = s1/n1
paste("VaR_tilde is ", VaR_tilde1)
paste("expection is ", expection1)
qqnorm(ford_return)
knitr::opts_chunk$set(echo = TRUE)
dat = read.csv("Nasdaq_daily_Jan1_2012_Dec31_2017.csv", header = T)
t = as.Date(dat$Date, format = "%m/%d/%Y")
idx1 = which(is.na(dat$Adj.Close) == FALSE)
times = t[idx1]
acp = dat$Adj.Close[idx1]
acp_lreturn = diff(log(acp))
source('startup.R')
lambda = sqrt(2)/sd(acp_lreturn)
mu = mean(acp_lreturn)
sig = sd(acp_lreturn)
lret = qdexp(0.005, mu, lambda)
ret = exp(lret) - 1
VaR_tilde = - ret
paste("the mean is ", mean(acp_lreturn))
paste("the standard deviation is ", sd(acp_lreturn))
paste("VaR_tilde = ", VaR_tilde)
-(exp(quantile(acp_lreturn, 0.005))-1)
set.seed(2015)
VaR = VaR_tilde * 10 * 10^6
r = rdexp(1000000, mu, lambda) # generate random numbers for 1000 times
port = 10^7 * exp(r)
s = 0
n = 0
port = -(port - 10^7)
for (i in port)
{
if (i > VaR)
{
s = s + i
n = n + 1
}
}
expection = s/n
paste("expection is", expection)
idx11 = which(acp_lreturn <= 0)
acp_lreturn1 = acp_lreturn[idx11]
set.seed(2015)
lambda1 = 1/sd(acp_lreturn1)
VaR_tilde1 = -(exp(-qexp(1 - 0.005, rate = lambda1))-1)
VaR1 = VaR_tilde1 * 10 * 10^6
r1 = -rexp(1000000, lambda1) # generate random numbers for 1000 times
port1 = 10^7 * exp(r1)
s1 = 0
n1 = 0
port1 = -(port1 - 10^7)
for (i in port1)
{
if (i > VaR1)
{
s1 = s1 + i
n1 = n1 + 1
}
}
expection1 = s1/n1
paste("VaR_tilde is ", VaR_tilde1)
paste("expection is ", expection1)
-(exp(quantile(acp_lreturn1, 0.005))-1)
dat1 = read.csv("ford.csv", header = T)
t1 = as.Date(dat1$X.m..d..y, format = "%m/%d/%Y")
idx2 = which(is.na(dat1$FORD) == FALSE)
times1 = t1[idx2]
ford_return = dat1$FORD[idx2]
paste("mean is ", mean(ford_return))
paste("median is ", median(ford_return))
paste("standard deviation is ", sd(ford_return))
qqnorm(ford_return)
qqline(ford_return)
par(mfrow = c(3,2))
t_quantiles = fGarch::qstd(c(1:n)/(n+1), mean = mu, sd = sig, nu = 3)
plot(t_quantiles, t_quantiles, col = "red", type = "l", xlab = "t-dist quantiles", ylab = "Data", main = paste("QQ-plot: t-dist (df = ", 3, " )", sep = ""))
points(t_quantiles, sort(ford_return), pch = ".", cex = 0.8)
knitr::opts_chunk$set(echo = TRUE)
dat = read.csv("Nasdaq_daily_Jan1_2012_Dec31_2017.csv", header = T)
t = as.Date(dat$Date, format = "%m/%d/%Y")
idx1 = which(is.na(dat$Adj.Close) == FALSE)
times = t[idx1]
acp = dat$Adj.Close[idx1]
acp_lreturn = diff(log(acp))
source('startup.R')
lambda = sqrt(2)/sd(acp_lreturn)
mu = mean(acp_lreturn)
sig = sd(acp_lreturn)
lret = qdexp(0.005, mu, lambda)
ret = exp(lret) - 1
VaR_tilde = - ret
paste("the mean is ", mean(acp_lreturn))
paste("the standard deviation is ", sd(acp_lreturn))
paste("VaR_tilde = ", VaR_tilde)
-(exp(quantile(acp_lreturn, 0.005))-1)
set.seed(2015)
VaR = VaR_tilde * 10 * 10^6
r = rdexp(1000000, mu, lambda) # generate random numbers for 1000 times
port = 10^7 * exp(r)
s = 0
n = 0
port = -(port - 10^7)
for (i in port)
{
if (i > VaR)
{
s = s + i
n = n + 1
}
}
expection = s/n
paste("expection is", expection)
idx11 = which(acp_lreturn <= 0)
acp_lreturn1 = acp_lreturn[idx11]
set.seed(2015)
lambda1 = 1/sd(acp_lreturn1)
VaR_tilde1 = -(exp(-qexp(1 - 0.005, rate = lambda1))-1)
VaR1 = VaR_tilde1 * 10 * 10^6
r1 = -rexp(1000000, lambda1) # generate random numbers for 1000 times
port1 = 10^7 * exp(r1)
s1 = 0
n1 = 0
port1 = -(port1 - 10^7)
for (i in port1)
{
if (i > VaR1)
{
s1 = s1 + i
n1 = n1 + 1
}
}
expection1 = s1/n1
paste("VaR_tilde is ", VaR_tilde1)
paste("expection is ", expection1)
-(exp(quantile(acp_lreturn1, 0.005))-1)
dat1 = read.csv("ford.csv", header = T)
t1 = as.Date(dat1$X.m..d..y, format = "%m/%d/%Y")
idx2 = which(is.na(dat1$FORD) == FALSE)
times1 = t1[idx2]
ford_return = dat1$FORD[idx2]
paste("mean is ", mean(ford_return))
paste("median is ", median(ford_return))
paste("standard deviation is ", sd(ford_return))
qqnorm(ford_return)
qqline(ford_return)
shapiro.test(ford_return)
par(mfrow = c(3,2))
t_quantiles = fGarch::qstd(c(1:n)/(n+1), mean = mu, sd = sig, nu = 3)
plot(t_quantiles, t_quantiles, col = "red", type = "l", xlab = "t-dist quantiles", ylab = "Data", main = paste("QQ-plot: t-dist (df = ", 3, " )", sep = ""))
points(t_quantiles, sort(ford_return), pch = ".", cex = 0.8)
knitr::opts_chunk$set(echo = TRUE)
dat = read.csv("Nasdaq_daily_Jan1_2012_Dec31_2017.csv", header = T)
t = as.Date(dat$Date, format = "%m/%d/%Y")
idx1 = which(is.na(dat$Adj.Close) == FALSE)
times = t[idx1]
acp = dat$Adj.Close[idx1]
acp_lreturn = diff(log(acp))
source('startup.R')
lambda = sqrt(2)/sd(acp_lreturn)
mu = mean(acp_lreturn)
sig = sd(acp_lreturn)
lret = qdexp(0.005, mu, lambda)
ret = exp(lret) - 1
VaR_tilde = - ret
paste("the mean is ", mean(acp_lreturn))
paste("the standard deviation is ", sd(acp_lreturn))
paste("VaR_tilde = ", VaR_tilde)
-(exp(quantile(acp_lreturn, 0.005))-1)
set.seed(2015)
VaR = VaR_tilde * 10 * 10^6
r = rdexp(1000000, mu, lambda) # generate random numbers for 1000 times
port = 10^7 * exp(r)
s = 0
n = 0
port = -(port - 10^7)
for (i in port)
{
if (i > VaR)
{
s = s + i
n = n + 1
}
}
expection = s/n
paste("expection is", expection)
idx11 = which(acp_lreturn <= 0)
acp_lreturn1 = acp_lreturn[idx11]
set.seed(2015)
lambda1 = 1/sd(acp_lreturn1)
VaR_tilde1 = -(exp(-qexp(1 - 0.005, rate = lambda1))-1)
VaR1 = VaR_tilde1 * 10 * 10^6
r1 = -rexp(1000000, lambda1) # generate random numbers for 1000 times
port1 = 10^7 * exp(r1)
s1 = 0
n1 = 0
port1 = -(port1 - 10^7)
for (i in port1)
{
if (i > VaR1)
{
s1 = s1 + i
n1 = n1 + 1
}
}
expection1 = s1/n1
paste("VaR_tilde is ", VaR_tilde1)
paste("expection is ", expection1)
-(exp(quantile(acp_lreturn1, 0.005))-1)
dat1 = read.csv("ford.csv", header = T)
t1 = as.Date(dat1$X.m..d..y, format = "%m/%d/%Y")
idx2 = which(is.na(dat1$FORD) == FALSE)
times1 = t1[idx2]
ford_return = dat1$FORD[idx2]
paste("mean is ", mean(ford_return))
paste("median is ", median(ford_return))
paste("standard deviation is ", sd(ford_return))
qqnorm(ford_return)
qqline(ford_return)
shapiro.test(ford_return)
par(mfrow = c(3,2))
mu = mean(ford_return)
sig = sd(ford_return)
grid = (1:n)/(n+1)
qqplot(sort(ford_return), qt(grid, df = 4), main="QQ-plot: t-dist(df = 4)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 4) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 5), main="QQ-plot: t-dist(df = 4)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 5) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 6), main="QQ-plot: t-dist(df = 4)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 6) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 7), main="QQ-plot: t-dist(df = 4)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 7) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 8), main="QQ-plot: t-dist(df = 4)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 8) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 9), main="QQ-plot: t-dist(df = 4)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 9) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
knitr::opts_chunk$set(echo = TRUE)
dat = read.csv("Nasdaq_daily_Jan1_2012_Dec31_2017.csv", header = T)
t = as.Date(dat$Date, format = "%m/%d/%Y")
idx1 = which(is.na(dat$Adj.Close) == FALSE)
times = t[idx1]
acp = dat$Adj.Close[idx1]
acp_lreturn = diff(log(acp))
source('startup.R')
lambda = sqrt(2)/sd(acp_lreturn)
mu = mean(acp_lreturn)
sig = sd(acp_lreturn)
lret = qdexp(0.005, mu, lambda)
ret = exp(lret) - 1
VaR_tilde = - ret
paste("the mean is ", mean(acp_lreturn))
paste("the standard deviation is ", sd(acp_lreturn))
paste("VaR_tilde = ", VaR_tilde)
-(exp(quantile(acp_lreturn, 0.005))-1)
set.seed(2015)
VaR = VaR_tilde * 10 * 10^6
r = rdexp(1000000, mu, lambda) # generate random numbers for 1000 times
port = 10^7 * exp(r)
s = 0
n = 0
port = -(port - 10^7)
for (i in port)
{
if (i > VaR)
{
s = s + i
n = n + 1
}
}
expection = s/n
paste("expection is", expection)
idx11 = which(acp_lreturn <= 0)
acp_lreturn1 = acp_lreturn[idx11]
set.seed(2015)
lambda1 = 1/sd(acp_lreturn1)
VaR_tilde1 = -(exp(-qexp(1 - 0.005, rate = lambda1))-1)
VaR1 = VaR_tilde1 * 10 * 10^6
r1 = -rexp(1000000, lambda1) # generate random numbers for 1000 times
port1 = 10^7 * exp(r1)
s1 = 0
n1 = 0
port1 = -(port1 - 10^7)
for (i in port1)
{
if (i > VaR1)
{
s1 = s1 + i
n1 = n1 + 1
}
}
expection1 = s1/n1
paste("VaR_tilde is ", VaR_tilde1)
paste("expection is ", expection1)
-(exp(quantile(acp_lreturn1, 0.005))-1)
dat1 = read.csv("ford.csv", header = T)
t1 = as.Date(dat1$X.m..d..y, format = "%m/%d/%Y")
idx2 = which(is.na(dat1$FORD) == FALSE)
times1 = t1[idx2]
ford_return = dat1$FORD[idx2]
paste("mean is ", mean(ford_return))
paste("median is ", median(ford_return))
paste("standard deviation is ", sd(ford_return))
qqnorm(ford_return)
qqline(ford_return)
shapiro.test(ford_return)
par(mfrow = c(3,2))
mu = mean(ford_return)
sig = sd(ford_return)
grid = (1:n)/(n+1)
qqplot(sort(ford_return), qt(grid, df = 4), main="QQ-plot: t-dist(df = 4)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 4) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 5), main="QQ-plot: t-dist(df = 5)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 5) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 6), main="QQ-plot: t-dist(df = 6)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 6) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 7), main="QQ-plot: t-dist(df = 7)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 7) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 8), main="QQ-plot: t-dist(df = 8)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 8) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
qqplot(sort(ford_return), qt(grid, df = 9), main="QQ-plot: t-dist(df = 9)", xlab = "t-dist quantiles", ylab = "Data")
lin = lm(qt(c(0.25,0.75), df = 9) ~ quantile(sort(ford_return), c(0.25, 0.75)))
abline(lin)
t1[which.min(ford_return)]
quantile(ecdf(ford_return),0.5)
median(ford_return)
F_inverse = quantile(ecdf(ford_return),0.5)
dens = density(ford_return, kernel = c("gaussian"))
f = dens$y[which.min(abs(dens$x - F_inverse))]
variance = 0.5^2/(n*(f)^2)
sqrt(variance)
length(ford_return)
n
F_inverse = quantile(ecdf(ford_return),0.5)
dens = density(ford_return, kernel = c("gaussian"))
f = dens$y[which.min(abs(dens$x - F_inverse))]
variance = 0.5^2/(length(ford_return)*(f)^2)
sqrt(variance)
sd(ford_return)/sqrt(length(ford_return))
x = seq(-3,3,0.01)
b1 = 0.1
b2 = 0.2
b3 = 0.4
omiga1 = 3.464 * b1
omiga2 = 3.464 * b2
omiga3 = 3.464 * b3
bias1 = (pnorm(x+omiga1/2) - pnorm(x - omiga1/2))/omiga1 - dnorm(x)
bias2 = (pnorm(x+omiga2/2) - pnorm(x - omiga2/2))/omiga2 - dnorm(x)
bias3 = (pnorm(x+omiga3/2) - pnorm(x - omiga3/2))/omiga3 - dnorm(x)
plot(x, bias1, type = "l", lwd = 2, ylab = "bias")
lines(x, bias2, lty = 2, lwd = 2)
lines(x, bias2, lty = 3, lwd = 2)
legend(1,-.02, c("b = 0.1", "b = 0.2", "b = 0.4"), lty = c(1,2,3), lwd = 2)
x = seq(-3,3,0.01)
b1 = 0.1
b2 = 0.2
b3 = 0.4
omiga1 = 3.464 * b1
omiga2 = 3.464 * b2
omiga3 = 3.464 * b3
bias1 = (pnorm(x+omiga1/2) - pnorm(x - omiga1/2))/omiga1 - dnorm(x)
bias2 = (pnorm(x+omiga2/2) - pnorm(x - omiga2/2))/omiga2 - dnorm(x)
bias3 = (pnorm(x+omiga3/2) - pnorm(x - omiga3/2))/omiga3 - dnorm(x)
plot(x, bias1, type = "l", ylim = c(-0.03, 0,02), lwd = 2, ylab = "bias")
x = seq(-3,3,0.01)
b1 = 0.1
b2 = 0.2
b3 = 0.4
omiga1 = 3.464 * b1
omiga2 = 3.464 * b2
omiga3 = 3.464 * b3
bias1 = (pnorm(x+omiga1/2) - pnorm(x - omiga1/2))/omiga1 - dnorm(x)
bias2 = (pnorm(x+omiga2/2) - pnorm(x - omiga2/2))/omiga2 - dnorm(x)
bias3 = (pnorm(x+omiga3/2) - pnorm(x - omiga3/2))/omiga3 - dnorm(x)
plot(x, bias1, type = "l", ylim = c(-0.03, 0.02), lwd = 2, ylab = "bias")
lines(x, bias2, lty = 2, lwd = 2)
lines(x, bias2, lty = 3, lwd = 2)
legend(1,-.02, c("b = 0.1", "b = 0.2", "b = 0.4"), lty = c(1,2,3), lwd = 2)
x = seq(-3,3,0.01)
b1 = 0.1
b2 = 0.2
b3 = 0.4
omiga1 = 3.464 * b1
omiga2 = 3.464 * b2
omiga3 = 3.464 * b3
bias1 = (pnorm(x+omiga1/2) - pnorm(x - omiga1/2))/omiga1 - dnorm(x)
bias2 = (pnorm(x+omiga2/2) - pnorm(x - omiga2/2))/omiga2 - dnorm(x)
bias3 = (pnorm(x+omiga3/2) - pnorm(x - omiga3/2))/omiga3 - dnorm(x)
plot(x, bias1, type = "l", ylim = c(-0.03, 0.02), lwd = 2, ylab = "bias")
lines(x, bias2, lty = 2, lwd = 2)
lines(x, bias2, lty = 3, lwd = 2)
legend("bottomright", c("b = 0.1", "b = 0.2", "b = 0.4"), lty = c(1,2,3), lwd = 2)
x = seq(-3,3,0.01)
b1 = 0.1
b2 = 0.2
b3 = 0.4
omiga1 = 3.464 * b1
omiga2 = 3.464 * b2
omiga3 = 3.464 * b3
bias1 = (pnorm(x+omiga1/2) - pnorm(x - omiga1/2))/omiga1 - dnorm(x)
bias2 = (pnorm(x+omiga2/2) - pnorm(x - omiga2/2))/omiga2 - dnorm(x)
bias3 = (pnorm(x+omiga3/2) - pnorm(x - omiga3/2))/omiga3 - dnorm(x)
plot(x, bias1, type = "l", ylim = c(-0.03, 0.02), lwd = 2, ylab = "bias")
lines(x, bias2, lty = 2, lwd = 2)
lines(x, bias3, lty = 3, lwd = 2)
legend("bottomright", c("b = 0.1", "b = 0.2", "b = 0.4"), lty = c(1,2,3), lwd = 2)
x = seq(-3,3,0.01)
b1 = 0.1
b2 = 0.2
b3 = 0.4
omiga1 = 3.464 * b1
omiga2 = 3.464 * b2
omiga3 = 3.464 * b3
bias1 = (pnorm(x+omiga1/2) - pnorm(x - omiga1/2))/omiga1 - dnorm(x)
bias2 = (pnorm(x+omiga2/2) - pnorm(x - omiga2/2))/omiga2 - dnorm(x)
bias3 = (pnorm(x+omiga3/2) - pnorm(x - omiga3/2))/omiga3 - dnorm(x)
plot(x, bias1, type = "l", ylim = c(-0.03, 0.02), lwd = 2, ylab = "bias")
lines(x, bias2, lty = 2, lwd = 2)
lines(x, bias3, lty = 3, lwd = 2)
legend("bottomleft", c("b = 0.1", "b = 0.2", "b = 0.4"), lty = c(1,2,3), lwd = 2)
x = seq(-3,3,0.01)
b1 = 0.1
b2 = 0.2
b3 = 0.4
omiga1 = 3.464 * b1
omiga2 = 3.464 * b2
omiga3 = 3.464 * b3
bias1 = (pnorm(x+omiga1/2) - pnorm(x - omiga1/2))/omiga1 - dnorm(x)
bias2 = (pnorm(x+omiga2/2) - pnorm(x - omiga2/2))/omiga2 - dnorm(x)
bias3 = (pnorm(x+omiga3/2) - pnorm(x - omiga3/2))/omiga3 - dnorm(x)
plot(x, bias1, type = "l", ylim = c(-0.03, 0.02), lwd = 2, ylab = "bias")
lines(x, bias2, lty = 2, lwd = 2)
lines(x, bias3, lty = 3, lwd = 2)
legend("bottomleft", c("b = 0.1", "b = 0.2", "b = 0.4"), lty = c(1,2,3), lwd = 2)
abline(h=0)
which.min(bias1)
which.min(abs(bias1))
x[which.min(abs(bias1))]
x[which.min(abs(bias2))]
x[which.min(abs(bias3))]
x[which.min(abs(bias1))]
x[which.min(abs(bias1))]
x[which.max(abs(bias1))]
x[which.min(abs(bias1))]
x[which.min(abs(bias1))]
help("ARMAacf")
all(abs(armaacf1 - armaacf2) < 1e-6)
all(abs(armaacf1 - armaacf2) < 1e-6)
all(abs(armaacf1 - armaacf2) < 1e-6)
all(abs(armaacf1 - armaacf2) < 1e-6)
set.seed(123456789)
coeff = 0.6
armaacf1 = coeff^(0:100)
armaacf2 = ARMAacf(ar = coeff, lag.max = 100)
all(abs(armaacf1 - armaacf2) < 1e-6)
all(abs(armaacf1 - armaacf2) < 1e-6)
plot(armaacf1,type="l", col='red', xlab ="lag")
lines(armaacf2, lty =2, col='blue')
legend("topright", legend = c("our result", "R function"), col = c("red","blue"), lty =c(1,2))
install.packages("rticles")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("knitLatex")
install.packages("bookdown")
knitr::opts_chunk$set(echo = TRUE)
XX = read.csv("SP100_daily_03-13.csv", header = T)
SP100_dl = rev(XX$AdjClose)
SP100_dl_lreturn = diff(log(SP100_dl))
SP100_dl
help(skewness)
XX = read.csv("SP100_daily_03-13.csv", header = T)
SP100_dl = rev(XX$AdjClose)
SP100_dl_lreturn = diff(log(SP100_dl))
library(fBasics)
knitr::opts_chunk$set(echo = TRUE)
XX = read.csv("SP100_daily_03-13.csv", header = T)
t = as.Date(XX$Date, format = "%m/%d/%Y")
SP100_dl = rev(XX$AdjClose)
SP100_dl_lreturn = diff(log(SP100_dl))
library(fBasics)
paste("the median of log returns is ", median(SP100_dl_lreturn))
paste("the mean of log returns is ", mean(SP100_dl_lreturn))
paste("the variance of log returns is ", var(SP100_dl_lreturn))
paste("the skewness of log returns is ", skewness(SP100_dl_lreturn))
paste("the kurtosis of log returns is ", kurtosis(SP100_dl_lreturn))
knitr::opts_chunk$set(echo = TRUE)
XX = read.csv("SP100_daily_03-13.csv", header = T)
t = as.Date(XX$Date, format = "%m/%d/%Y")
SP100_dl = rev(XX$AdjClose)
SP100_dl_lreturn = diff(log(SP100_dl))
library(fBasics)
paste("the median of log returns is ", median(SP100_dl_lreturn))
paste("the mean of log returns is ", mean(SP100_dl_lreturn))
paste("the variance of log returns is ", var(SP100_dl_lreturn))
paste("the skewness of log returns is ", skewness(SP100_dl_lreturn))
paste("the kurtosis of log returns is ", kurtosis(SP100_dl_lreturn))
install.packages("fExtremes")
library(fExtremes)
sig = sd(SP100_dl_lreturn)
mu = mean(SP100_dl_lreturn)
dgpd(SP100_dl_lreturn, xi = 1, mu, beta = sig, log = FALSE)
